# 70. Дополните приведенный код, используя индексацию кортежа, чтобы переменная last, содержала последний элемент кортежа countries.

countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy')
last = countries[-1]
print(last)

# 71. Дополните приведенный код, используя срезы, так чтобы он вывел первые 6 элементов кортежа primes.
#     Примечание. Результатом вывода должна быть строка (2, 3, 5, 7, 11, 13).

primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71) 
print(primes[:6])

# 72. Дополните приведенный код, используя срезы, так чтобы он вывел элементы кортежа countries кроме первых двух.
#     Примечание. Результатом вывода должна быть строка ('Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon').

countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
print(countries[2:])

# 73. Дополните приведенный код, используя срезы, чтобы он вывел все элементы кортежа countries, кроме последних трех.

countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
print(countries[:len(countries)-3])

# 74. Дополните приведенный код, используя срезы, чтобы он вывел все элементы кортежа countries, кроме двух последних и трех первых.

countries = ('Russia', 'Argentina', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Cameroon')
print(countries[3:-2])

# 75. Дополните приведенный код так, чтобы переменная number содержала количество элементов кортежа countries.

countries = ('Romania', 'Poland', 'Estonia', 'Bulgaria', 'Slovakia', 'Slovenia', 'Hungary')
number = len(countries)
print(number)

# 76. Дополните приведенный код так, чтобы он вывел сумму минимального и максимального элементов кортежа numbers.

numbers = (12.5, 3.1415, 2.718, 9.8, 1.414, 1.1618, 1.324)
print(max(numbers) + min(numbers))

# 77. Дополните приведенный код так, чтобы переменная index содержала индекс элемента «Slovenia» в кортеже countries.

countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy')
index = countries.index('Slovenia')
print(index)

# 78. Дополните приведенный код так, чтобы переменная number, содержала количество вхождений «Spain» в кортеж countries.

countries = ('Russia', 'Argentina', 'Spain', 'Slovakia', 'Canada', 'Slovenia', 'Italy', 'Spain', 'Ukraine', 'Chile', 'Spain', 'Cameroon')
number = countries.count('Spain')
print(number)

# 79. Дополните приведенный код, используя операторы конкатенации (+) и умножения кортежа на число (*), чтобы он вывел кортеж:
#     (1, 2, 3, 1, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13).

numbers1 = (1, 2, 3)
numbers2 = (6,)
numbers3 = (7, 8, 9, 10, 11, 12, 13)

print(numbers1 * 2 + numbers2 * 9 + numbers3)

# 80. В переменную city_name вводится название города (например, Москва), а в переменную city_year – год его основания (например, 1147). 
#     Заполните пропущенную строку таким образом, чтобы в переменной city оказался кортеж из значений этих двух переменных (сначала название города, затем год основания).

city_name = input()
city_year = int(input())
city = (city_name, city_year)
print(city)

# 81. Дополните приведенный код так, чтобы получить список, содержащий только непустые кортежи исходного списка tuples, не меняя порядка их следования.

tuples = [(), (), ('',), ('a', 'b'), (), ('a', 'b', 'c'), (1,), (), (), ('d',), ('', ''), ()]
non_empty_tuples = [i for i in tuples if len(i) > 0]
print(non_empty_tuples)

# 82. Дополните приведенный код так, чтобы переменная new_tuples содержала список кортежей на основе списка tuples с последним элементом каждого кортежа, замененным на численное значение 100.

tuples = [(10, 20, 40), (40, 50, 60), (70, 80, 90), (10, 90), (1, 2, 3, 4), (5, 6, 10, 2, 1, 77)]
tmp = [tuple([j for j in list(i)[:-1]]) for i in tuples]
new_tuples = [i + (100,) for i in tmp]
print(new_tuples)

# 83. Дополните приведенный код так, чтобы он вывел произведение элементов кортежа numbers.

numbers = (2, 3, 5, 7, -11, 13, 17, 19, 23, 29, 31, -6, 41, 43, 47, 53, 59, 61, -96, 71, 1000, -1)
res = 1

for i in range(len(numbers)):
    res *= numbers[i]

print(res)

# 84. Дополните приведенный код так, чтобы он преобразовал строку в кортеж символов строки и вывел результат.

data = 'Python для продвинутых!'
print(tuple(data))

# 85. Программист Тимур написал программу для работы с биографическими данными русских поэтов. Данные содержатся в кортежах вида (фамилия, год рождения, город рождения). 
#     В процессе работы программы в некотором кортеже poet_data обнаружилась ошибка: ('Пушкин', 1799, 'Санкт-Петербург'). 
#     Тут неверно указано место рождения, ведь Александр Пушкин родился в Москве.
#     Дополните приведенный код так, чтобы в переменной poet_data находился правильный кортеж (с исправленным значением), а затем выведите его содержимое.

poet_data = ('Пушкин', 1799, 'Санкт-Петербург')
poet_data = list(poet_data)
poet_data[-1] = 'Москва'
print(tuple(poet_data))

# 86. Дополните приведенный код так, чтобы он вывел список, содержащий средние арифметические значения чисел каждого вложенного кортежа в заданном кортеже кортежей numbers.

numbers = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4), (90, 10))
print([sum(i) / len(i) for i in numbers])

# 87. Уравнение параболы имеет вид y =ax**2+bx+c, где a!=0. Напишите программу, которая по введенным значениям a,b,c определяет и выводит вершину параболы.
# 
#     Формат входных данных
#     На вход программе подаются три целых числа, каждое на отдельной строке.
# 
#     Формат выходных данных
#     Программа должна вывести координаты вершины параболы.

a, b, c = int(input()), int(input()), int(input())
print((-(b / (2 * a)), (((4 * a * c) - b ** 2)) / (4 * a)))

# 88. Напишите программу, которая выводит список хорошистов и отличников в классе.
# 
#     Формат входных данных
#     На вход программе подается натуральное число n, далее следует n строк с фамилией школьника и его оценкой на каждой из них.
# 
#     Формат выходных данных
#     Программа должна вывести сначала все введённые строки с фамилиями и оценками учеников в том же порядке. 
#     Затем следует пустая строка, а затем выводятся строки с фамилиями и оценками хорошистов и отличников (в том же порядке).
# 
#     Примечание 1. Оценка ученика – это натуральное число от 1 до 5.
#     Примечание 2. Гарантируется, что в классе есть хотя бы один хорошист (обладатель оценки 4) или отличник (получивший 5).

students = ()
for _ in range(int(input())):
    students += (input()),

print(*students, sep='\n')
print()
print(*[j for j in students if int(j[-1]) > 3], sep='\n')

# 89. Напишите программу, которая считывает натуральное число n и выводит первые n чисел последовательности Трибоначчи.
# 
#     Формат входных данных
#     На вход программе подается одно число n (n≤100) – количество членов последовательности.
# 
#     Формат выходных данных
#     Программа должна вывести члены последовательности Трибоначчи, отделенные символом пробела.
# 
#     Примечание. Последовательность Трибоначчи – последовательность натуральных чисел, где каждое последующее число является суммой трех предыдущих:
#     1, 1, 1, 3, 5, 9, 17, 31, 57, 105

def tribonacci(n):
    seq = [1, 1, 1]
    if n <= 3:
        return seq[:n]
    for _ in range(3, n):
        next_num = seq[-1] + seq[-2] + seq[-3]
        seq.append(next_num)
    return seq

print(*tribonacci(int(input())))