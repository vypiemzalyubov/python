# 205. Напишите функцию matrix(), которая создает, заполняет и возвращает матрицу заданного размера. 
#      При этом (в зависимости от переданных аргументов) она должна вести себя так:
#      - matrix() — возвращает матрицу 1×1, в которой единственное число равно нулю;
#      - matrix(n) — возвращает матрицу n×n, заполненную нулями;
#      - matrix(n, m) — возвращает матрицу из n строк и m столбцов, заполненную нулями;
#      - matrix(n, m, value) — возвращает матрицу из n строк и m столбцов, в которой каждый элемент равен числу value.
#      При создании функции пользуйтесь аргументами по умолчанию.
# 
#      Примечание 1. Приведенный ниже код:
#      print(matrix())         # матрица 1 × 1 из 0
#      print(matrix(3))        # матрица 3 × 3 из 0
#      print(matrix(2, 5))     # матрица 2 × 5 из 0
#      print(matrix(3, 4, 9))  # матрица 3 × 4 из 9
#      должен выводить:
#      [[0]]
#      [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
#      [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
#      [[9, 9, 9, 9], [9, 9, 9, 9], [9, 9, 9, 9]]
#      Примечание 2. Вызывать функцию matrix() не нужно, требуется только реализовать ее.

def matrix(n: int = 1, m: int = None, value: int = 0):
    if m is None:
        m = n
    return [[value]*m for _ in range(n)]

# 206. Напишите функцию count_args(), которая принимает произвольное количество аргументов и возвращает количество переданных в нее аргументов.
# 
#      Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
#      Примечание 2. Следующий программный код:
#      print(count_args())
#      print(count_args(10))
#      print(count_args('stepik', 'beegeek'))
#      print(count_args([], (''), 'a', 12, False))
#      должен выводить:
#      0
#      1
#      2
#      5
#      Примечание 3. Вызывать функцию count_args() не нужно, требуется только реализовать.

def count_args(*args):
    return len(args)

# 207. Напишите функцию sq_sum(), которая принимает произвольное количество числовых аргументов и возвращает сумму их квадратов.
# 
#      Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
#      Примечание 2. Следующий программный код:
#      print(sq_sum())
#      print(sq_sum(2))
#      print(sq_sum(1.5, 2.5))
#      print(sq_sum(1, 2, 3))
#      print(sq_sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
#      должен выводить:
#      0
#      4
#      8.5
#      14
#      385
#      Примечание 3. Вызывать функцию sq_sum() не нужно, требуется только реализовать.

def sq_sum(*args):
    return sum([i**2 for i in args])

# 208. Напишите функцию mean(), которая принимает произвольное количество аргументов и возвращает среднее арифметическое переданных в нее числовых (int или float) аргументов.
# 
#      Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
#      Примечание 2. Функция должна игнорировать аргументы всех типов, кроме int или float.
#      Примечание 3. Следующий программный код:
#      print(mean())
#      print(mean(7))
#      print(mean(1.5, True, ['stepik'], 'beegeek', 2.5, (1, 2)))
#      print(mean(True, ['stepik'], 'beegeek', (1, 2)))
#      print(mean(-1, 2, 3, 10, ('5')))
#      print(mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
#      должен выводить:
#      0.0
#      7.0
#      2.0
#      0.0
#      3.5
#      5.5
#      Примечание 4. Для проверки типа можно использовать встроенную функцию type().
#      Примечание 5. Вызывать функцию mean() не нужно, требуется только реализовать.

def mean(*args):
    tmp = [i for i in args if type(i) in (int, float)]
    if not len(tmp):
        return 0.0
    return sum(tmp) / len(tmp)

# 209. Напишите функцию greet(), которая принимает произвольное количество аргументов строк имен (как минимум одно) и возвращает приветствие в соответствии с образцом.
# 
#      Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
#      Примечание 2. Следующий программный код:
#      print(greet('Timur'))
#      print(greet('Timur', 'Roman'))
#      print(greet('Timur', 'Roman', 'Ruslan'))
#      должен выводить:
#      Hello, Timur!
#      Hello, Timur and Roman!
#      Hello, Timur and Roman and Ruslan!
#      Примечание 3. Функция greet() должна принимать как минимум один обязательный аргумент!
#      Примечание 4. Вызывать функцию greet() не нужно, требуется только реализовать.

def greet(name, *args):
    if not args:
        return f'Hello, {name}!'
    return f'Hello, {name} and {" and ".join([name for name in args])}!'

# 210. Напишите функцию print_products(), которая принимает произвольное количество аргументов и выводит список продуктов (любая непустая строка) по образцу: 
#      <номер продукта>) <название продукта> (нумерация продуктов начинается с единицы). 
#      Если среди переданных аргументов нет ни одного продукта, необходимо вывести текст Нет продуктов.
# 
#      Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
#      Примечание 2. Числа, списки, кортежи, словари, множества и другие нестроковые объекты продуктами не являются и их нужно игнорировать.
#      Примечание 3. Следующий программный код:
#      print_products('Бананы', [1, 2], ('Stepik',), 'Яблоки', '', 'Макароны', 5, True)
#      должен выводить:
#      1) Бананы
#      2) Яблоки
#      3) Макароны
#      Следующий программный код:
#      print_products([4], {}, 1, 2, {'Beegeek'}, '') 
#      должен выводить:
#      Нет продуктов
#      Примечание 4. Обратите внимание: функция print_products() должна выводить (печатать) нужное значение, а не возвращать его.
#      Примечание 5. Вызывать функцию print_products() не нужно, требуется только реализовать.

def print_products(*args):
    products = [c for c in args if isinstance(c, str) and c != '']
    if products:
        for i, v in enumerate(products, start=1):
            print(f'{i}) {v}')
    else:
        print('Нет продуктов')

# 211. Напишите функцию info_kwargs(), которая принимает произвольное количество именованных аргументов и печатает именованные аргументы в соответствии с образцом: 
#      <имя аргумента>: <значение аргумента>, при этом имена аргументов следуют в алфавитном порядке (по возрастанию).
# 
#      Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество именованных аргументов.
#      Примечание 2. Следующий программный код:
#      info_kwargs(first_name='Timur', last_name='Guev', age=28, job='teacher') 
#      должен выводить:
#      age: 28
#      first_name: Timur
#      job: teacher
#      last_name: Guev
#      Примечание 3. Вызывать функцию info_kwargs() не нужно, требуется только реализовать.

def info_kwargs(**kwargs):
    for k, v in sorted(kwargs.items()):
        print(f'{k}: {v}')

# 212. Дан список numbers, содержащий кортежи чисел. Напишите программу, которая с помощью встроенных функций min() и max() выводит те кортежи (каждый на отдельной строке), 
#      которые имеют минимальное и максимальное среднее арифметическое значение элементов.
# 
#      Примечание. Используйте необязательный аргумент key.

numbers = [(10, 10, 10), (30, 45, 56), (81, 39), (1, 2, 3), (12,), (-2, -4, 100), (1, 2, 99), (89, 9, 34), (10, 20, 30, -2), (50, 40, 50), (34, 78, 65), (-5, 90, -1, -5), (1, 2, 3, 4, 5, 6), (-9, 8, 4), (90, 1, -45, -21)]
avg = lambda n: sum(n) / len(n)

print(min(numbers, key=avg), max(numbers, key=avg), sep='\n')

# 213. Напишите программу, которая сортирует список points координат точек плоскости в соответствии с расстоянием от начала координат (точки (0;0)). 
#      Программа должна вывести отсортированный список.
# 
#      Примечание. Расстояние от начала координат O(0;0) до точки A(x;y) равно (x**2 + y**2) ** 0.5
#      Примечание. Используйте необязательный аргумент key.

points = [(-1, 1), (5, 6), (12, 0), (4, 3), (0, 1), (-3, 2), (0, 0), (-1, 3), (2, 0), (3, 0), (-9, 1), (3, 6), (8, 8)]
s = lambda x: (x[0]**2 + x[1]**2) ** 0.5

print(sorted(points, key=s))

# 214. Дан список numbers, содержащий кортежи чисел. Напишите программу, которая сортирует и выводит список numbers 
#      в соответствии с суммой минимального и максимального элемента кортежа.
# 
#      Примечание 1. В этой задаче мы считаем, что кортеж (2,1,3) меньше кортежа (6,4,5), так как 1+3<4+6. 
#      При этом кортеж (1,2,9) равен кортежу (4,5,6), так как 1+9 = 4+6.
#      Примечание 2. Используйте необязательный аргумент key.

numbers = [(10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3), (12, 45, 67), (-2, -4, 100), (1, 2, 99), (89, 90, 34), (10, 20, 30), (50, 40, 50), (34, 78, 65), (-5, 90, -1)]

print(sorted(numbers, key=lambda x: min(x) + max(x)))

# 215. Список athletes содержит сведения о спортсменах в виде кортежей: (имя, возраст, рост, вес).
#      Напишите программу сортировки списка спортсменов по указанному полю:
#      - 1: по имени;
#      - 2: по возрасту;
#      - 3: по росту;
#      - 4: по весу.
# 
#      Формат входных данных
#      На вход программе подается натуральное число от 1 до 4 – номер поля по которому требуется отсортировать список.
# 
#      Формат выходных данных
#      Программа должна вывести отсортированный по заданному полю список в соответствии с примерами.
# 
#      Примечание. Решите задачу без использования условного оператора.

athletes = [('Дима', 10, 130, 35), ('Тимур', 11, 135, 39), ('Руслан', 9, 140, 33), ('Рустам', 10, 128, 30), ('Амир', 16, 170, 70), ('Рома', 16, 188, 100), ('Матвей', 17, 168, 68), ('Петя', 15, 190, 90)]

col = int(input())
for athlete in sorted(athletes, key=lambda x: x[col-1]):
    print(*athlete)

# 216. Напишите программу, которая принимает число и название функции, а выводит результат применения функции к данному числу.
#      Список возможных функций:
#      - квадрат: функция принимает число и возвращает его квадрат;
#      - куб: функция принимает число и возвращает его куб;
#      - корень: функция принимает число и возвращает корень квадратный из этого числа;
#      - модуль: функция принимает число и возвращает его модуль;
#      - синус: функция принимает число (в радианах) и возвращает синус этого числа.
# 
#      Формат входных данных
#      На вход программе подается целое число и название функции, записанные на отдельных строках.
# 
#      Формат выходных данных
#      Программа должна выдать результат применения функции к числу.
# 
#      Примечание. Решите задачу без использования условного оператора.

def square(x):
    return x ** 2

def cube(x):
    return x ** 3

def root(x):
    return x ** 0.5

def modulus(x):
    return abs(x)

def sine(x):
    return __import__('math').sin(x)

ops = {'квадрат': square, 'куб': cube, 'корень': root, 'модуль': modulus, 'синус': sine}
x, op = int(input()), input()

print(ops[op](x))

# 217. На вход программе подается строка натуральных чисел. Из элементов строки формируется список чисел.
#      Напишите программу сортировки списка чисел в порядке неубывания суммы их цифр. 
#      При этом, если два числа имеют одинаковую сумму цифр, следует сохранить их взаиморасположение в начальном списке.
# 
#      Формат входных данных
#      На вход программе подается строка текста, содержащая натуральные числа, разделенные пробелами.
# 
#      Формат выходных данных
#      Программа должна вывести отсортированный список чисел в соответствии с условием задачи, разделяя его элементы одним пробелом.

print(*sorted([i for i in input().split()], key=lambda n: sum([int(i) for i in n])))

# 218. На вход программе подается строка натуральных чисел. Из элементов строки формируется список чисел.
#      Напишите программу сортировки списка чисел в порядке неубывания суммы их цифр. 
#      При этом, если у двух чисел одинаковая сумма цифр, их следует вывести в порядке неубывания.
# 
#      Формат входных данных
#      На вход программе подается строка текста, содержащая натуральные числа, разделенные пробелами.
# 
#      Формат выходных данных
#      Программа должна вывести отсортированный список чисел в соответствии с условием задачи, разделяя его элементы одним пробелом.
# 
#      Примечание. Рассмотрим 1-й тест. Сначала сортируем все числа в порядке неубывания суммы их цифр, а после, 
#      в пределах каждой "группы", сортируем числа в порядке неубывания самих чисел.

numbers = {i: sum([int(v) for v in i]) for i in sorted(input().split())}

for i in sorted(numbers.items(), key=lambda x: (x[1], int(x[0]))):
    print(i[0], end=' ')

# 219. Напишите программу, которая с помощью функции map() округляет все элементы списка numbers до 2 десятичных знаков, а затем выводит их, каждый на отдельной строке.

def map(function, items):
    result = []
    for item in items:
        result.append(function(item))
    return result


numbers = [3.56773, 5.57668, 4.00914, 56.24241, 9.01344, 32.12013, 23.22222, 90.09873, 45.45, 314.1528, 2.71828, 1.41546]

print(*map(lambda x: round(x, 2), numbers), sep='\n')

# 220. Напишите программу, которая с помощью функций filter() и map() отбирает из заданного списка numbers трёхзначные числа, дающие при делении на 5 остаток 2, 
#      и выводит их кубы, каждый в отдельной строке.
# 
#      Примечание. Остаток 2 при делении на 5 должно давать само число, а не его куб.

def map(function, items):
    result = []
    for item in items:
        result.append(function(item))
    return result


def filter(function, items):
    result = []
    for item in items:
        if function(item):
            result.append(item)
    return result


numbers = [1014, 1321, 675, 1215, 56, 1386, 1385, 431, 1058, 486, 1434, 696, 1016, 1084, 424, 1189, 475, 95, 1434, 1462, 815, 776, 657, 1225, 912, 537, 1478, 1176, 544, 488, 668, 944, 207, 266, 1309, 1027, 257, 1374, 1289, 1155, 230, 866, 708, 144, 1434, 1163, 345, 394, 560, 338, 232, 182, 1438, 1127, 928, 1309, 98, 530, 1013, 898, 669, 105, 130, 1363, 947, 72, 1278, 166, 904, 349, 831, 1207, 1496, 370, 725, 926, 175, 959, 1282, 336, 1268, 351, 1439, 186, 273, 1008, 231, 138, 142, 433, 456, 1268, 1018, 1274, 387, 120, 340, 963, 832, 1127]

print(*map(lambda x: x ** 3, filter(lambda x: 99 < x < 1000 and x % 5 == 2, numbers)), sep='\n')

# 221. Напишите программу для вычисления и вывода суммы квадратов элементов списка numbers.
#      Примечание. Попробуйте решить задачу двумя способами: с помощью функции reduce(), и с помощью функций map() и sum().

def reduce(operation, items, initial_value):
    acc = initial_value
    for item in items:
        acc = operation(acc, item)
    return acc


numbers = [97, 42, 9, 32, 3, 45, 31, 77, -1, 11, -2, 75, 5, 51, 34, 28, 46, 1, -8, 84, 16, 51, 90, 56, 65, 90, 23, 35, 11, -10, 70, 90, 90, 12, 96, 58, -8, -4, 91, 76, 94, 60, 72, 43, 4, -6, -5, 51, 58, 60, 30, 38, 67, 62, 36, 72, 34, 82, 62, -1, 60, 82, 87, 81, -7, 57, 26, 36, 17, 43, 80, 40, 75, 94, 91, 64, 38, 72, 29, 84, 38, 35, 7, 54, 31, 95, 78, 27, 82, 1, 64, 94, 31, 29, -8, 98, 24, 61, 7, 73]

print(sum(map(lambda x: x ** 2, numbers)))
print(reduce(lambda x, y: x + y ** 2, numbers, 0))

# 222. Напишите программу для вычисления и вывода суммы квадратов двузначных чисел из списка numbers, которые делятся на 7 без остатка.
# 
#      Примечание 1. При решении задачи используйте функции filter(), map() и sum().
#      Примечание 2. На 7 должно делиться исходное двузначное число, а не его квадрат.
#      Примечание 3. Не забывайте про отрицательные двузначные числа.

def map(function, items):
    result = []
    for item in items:
        result.append(function(item))
    return result


def filter(function, items):
    result = []
    for item in items:
        if function(item):
            result.append(item)
    return result


numbers = [77, 293, 28, 242, 213, 285, 71, 286, 144, 276, 61, 298, 280, 214, 156, 227, 228, 51, -4, 202, 58, 99, 270, 219, 94, 253, 53, 235, 9, 158, 49, 183, 166, 205, 183, 266, 180, 6, 279, 200, 208, 231, 178, 201, 260, -35, 152, 115, 79, 284, 181, 92, 286, 98, 271, 259, 258, 196, -8, 43, 2, 128, 143, 43, 297, 229, 60, 254, -9, 5, 187, 220, -8, 111, 285, 5, 263, 187, 192, -9, 268, -9, 23, 71, 135, 7, -161, 65, 135, 29, 148, 242, 33, 35, 211, 5, 161, 46, 159, 23, 169, 23, 172, 184, -7, 228, 129, 274, 73, 197, 272, 54, 278, 26, 280, 13, 171, 2, 79, -2, 183, 10, 236, 276, 4, 29, -10, 41, 269, 94, 279, 129, 39, 92, -63, 263, 219, 57, 18, 236, 291, 234, 10, 250, 0, 64, 172, 216, 30, 15, 229, 205, 123, -105]

print(sum(map(lambda x: x ** 2, filter(lambda x: 9 < x < 100 and x % 7 == 0, map(abs, numbers)))))

# 223. Напишите функцию func_apply(), принимающую на вход функцию и список значений и возвращающую список, 
#      в котором каждое значение будет результатом применения переданной функции к переданному списку.
# 
#      Примечание 1. Приведенный ниже код, при условии, что функция func_apply() написана правильно
#      def add3(x):
#          return x + 3
#      def mul7(x):
#          return x * 7
#      print(func_apply(mul7, [1, 2, 3, 4, 5, 6]))
#      print(func_apply(add3, [1, 2, 3, 4, 5, 6]))
#      print(func_apply(str, [1, 2, 3, 4, 5, 6]))
#      должен выводить:
#      [7, 14, 21, 28, 35, 42]
#      [4, 5, 6, 7, 8, 9]
#      ['1', '2', '3', '4', '5', '6']
#      Примечание 2. Вызывать функцию func_apply() не нужно, требуется только реализовать ее.

def func_apply(f, items):
    return [f(item) for item in items]

# 224. Требовалось написать программу, которая:
#      - преобразует список floats в список чисел, возведенных в квадрат и округленных с точностью до одного десятичного знака;
#      - фильтрует список words  и оставляет только палиндромы длиной более 4 символов;
#      - находит произведение чисел из списка numbers.
#      Программист торопился и написал программу неправильно. Доработайте его программу.

from functools import reduce 

floats = [4.35, 6.09, 3.25, 9.77, 2.16, 8.88, 4.59, 34.23, 12.12, 4.67, 2.45, 9.32]
words = ['racecar', 'akinremi', 'deed', 'temidayo', 'omoseun', 'civic', 'TATTARRATTAT', 'malayalam', 'nun']
numbers = [4, 6, 9, 23, 5]

# Исправьте этот код
map_result = list(map(lambda num: round(num ** 2, 1), floats))
filter_result = list(filter(lambda name: len(name) > 4 and name == name[::-1], words))
reduce_result = reduce(lambda num1, num2: num1 * num2, numbers, 1)

print(map_result)
print(filter_result)
print(reduce_result)

# 225. Напишите программу, которая с помощью встроенных функций filter(), map(), sorted() и reduce() выводит в алфавитном порядке список primary городов с населением более 10000000 человек, в формате:
#      Cities: Beijing, Buenos Aires, ...
# 
#      Примечание 1. Тестирующая система никак не "покарает" вас за неиспользование встроенных функций filter(), map(), sorted() и reduce(), однако лучше сделать это задание честно 😃.
#      Примечание 2. Ставить запятую в конце вывода не нужно.

from functools import reduce

data = [['Tokyo', 35676000, 'primary'],
        ['New York', 19354922, 'nan'],
        ['Mexico City', 19028000, 'primary'],
        ['Mumbai', 18978000, 'admin'],
        ['Sao Paulo', 18845000, 'admin'],
        ['Delhi', 15926000, 'admin'],
        ['Shanghai', 14987000, 'admin'],
        ['Kolkata', 14787000, 'admin'],
        ['Los Angeles', 12815475, 'nan'],
        ['Dhaka', 12797394, 'primary'],
        ['Buenos Aires', 12795000, 'primary'],
        ['Karachi', 12130000, 'admin'],
        ['Cairo', 11893000, 'primary'],
        ['Rio de Janeiro', 11748000, 'admin'],
        ['Osaka', 11294000, 'admin'],
        ['Beijing', 11106000, 'primary'],
        ['Manila', 11100000, 'primary'],
        ['Moscow', 10452000, 'primary'],
        ['Istanbul', 10061000, 'admin'],
        ['Paris', 9904000, 'primary']]

filter_cities = sorted(filter(lambda x: x[1] > 10000000 and x[2] == 'primary', data))
cities = list(map(lambda x: x[0], filter_cities))
result = reduce(lambda x, y: x + ', ' + y, cities)

print(f'Cities: {result}')

# 226. Напишите функцию func, используя синтаксис анонимных функций, которая принимает целочисленный аргумент и возвращает значение True, если он делится без остатка на 19 или на 13 и False в противном случае.
# 
#      Примечание 1. Следующий программный код:
#      print(func(19))
#      print(func(13))
#      print(func(20))
#      print(func(15))
#      print(func(247))
#      должен выводить:
#      True
#      True
#      False
#      False
#      True
#      Примечание 2. Вызывать анонимную функцию не нужно.

func = lambda x: x % 19 == 0 or x % 13 == 0

# 227. Напишите функцию func, используя синтаксис анонимных функций, которая принимает строковый аргумент и возвращает значение True, 
#      если переданный аргумент начинается и заканчивается на английскую букву a (регистр буквы неважен) и False в противном случае.
# 
#      Примечание 1. Следующий программный код:
#      print(func('abcd'))
#      print(func('bcda'))
#      print(func('abcda'))
#      print(func('Abcd'))
#      print(func('bcdA'))
#      print(func('abcdA'))
#      должен выводить:
#      False
#      False
#      True
#      False
#      False
#      True
#      Примечание 2. Вызывать анонимную функцию не нужно.

func = lambda x: x.lower().startswith('a') and x.lower().endswith('a')

# 228. Напишите функцию is_non_negative_num, используя синтаксис анонимных функций, которая принимает строковый аргумент и возвращает значение True, 
#      если переданный аргумент является неотрицательным числом (целым или вещественным) и False в противном случае.
# 
#      Примечание 1. Следующий программный код:
#      print(is_non_negative_num('10.34ab'))
#      print(is_non_negative_num('10.45'))
#      print(is_non_negative_num('-18'))
#      print(is_non_negative_num('-34.67'))
#      print(is_non_negative_num('987'))
#      print(is_non_negative_num('abcd'))
#      print(is_non_negative_num('123.122.12'))
#      print(is_non_negative_num('123.122'))
#      должен выводить:
#      False
#      True
#      False
#      False
#      True
#      False
#      False
#      True
#      Примечание 2. Неотрицательные числа — это положительные числа и число нуль.
#      Примечание 3. Вызывать анонимную функцию не нужно.

is_non_negative_num = lambda x: x.replace('.', '', 1).isdigit()

# 229. Напишите функцию is_num, используя синтаксис анонимных функций, которая принимает строковый аргумент и возвращает значение True, 
#      если переданный аргумент является числом (целым или вещественным) и False в противном случае.
# 
#      Примечание 1. Следующий программный код:
#      print(is_num('10.34ab'))
#      print(is_num('10.45'))
#      print(is_num('-18'))
#      print(is_num('-34.67'))
#      print(is_num('987'))
#      print(is_num('abcd'))
#      print(is_num('123.122.12'))
#      print(is_num('-123.122'))
#      print(is_num('--13.2'))
#      должен выводить:
#      False
#      True
#      True
#      True
#      True
#      False
#      False
#      True
#      False
#      Примечание 2. Используйте вспомогательную функцию из прошлого степа.
#      Примечание 3. Вызывать анонимную функцию не нужно.

is_num = lambda x: x.replace('-', '', 1).replace('.', '', 1).isdigit() and x.rfind('-') <= 0

# 230. Напишите программу, которая с помощью встроенных функций filter() и sorted() выводит слова из списка words, имеющие длину ровно 6 символов. 
#      Слова следует вывести в алфавитном порядке на одной строке, разделив символом пробела.
# 
#      Примечание. Используйте анонимную функцию в качестве критерия фильтрации.

words = ['beverage', 'monday', 'abroad', 'bias', 'abuse', 'abolish', 'abuse', 'abuse', 'bid', 'wednesday', 'able', 'betray', 'accident', 'abduct', 'bigot', 'bet', 'abandon', 'besides', 'access', 'friday', 'bestow', 'abound', 'absent', 'beware', 'abundant', 'abnormal', 'aboard', 'about', 'accelerate', 'abort', 'thursday', 'tuesday', 'sunday', 'berth', 'beyond', 'benevolent', 'abate', 'abide', 'bicycle', 'beside', 'accept', 'berry', 'bewilder', 'abrupt', 'saturday', 'accessory', 'absorb']

print(*sorted(filter(lambda x: len(x) == 6, words)))

# 231. Напишите программу, которая с помощью встроенных функций map() и filter() пошагово: 
#      1) Удаляет из списка numbers все нечетные элементы, большие 47;
#      2) Делит все четные элементы нацело на 2 (целочисленное деление – //).
#      Полученные числа следует вывести на одной строке, разделив символом пробела и сохранив исходный порядок.
# 
#      Примечание. Используйте анонимную функцию в качестве критерия фильтрации.

numbers = [46, 61, 34, 17, 56, 26, 93, 1, 3, 82, 71, 37, 80, 27, 77, 94, 34, 100, 36, 81, 33, 81, 66, 83, 41, 80, 80, 93, 40, 34, 32, 16, 5, 16, 40, 93, 36, 65, 8, 19, 8, 75, 66, 21, 72, 32, 41, 59, 35, 64, 49, 78, 83, 27, 57, 53, 43, 35, 48, 17, 19, 40, 90, 57, 77, 56, 80, 95, 90, 27, 26, 6, 4, 23, 52, 39, 63, 74, 15, 66, 29, 88, 94, 37, 44, 2, 38, 36, 32, 49, 5, 33, 60, 94, 89, 8, 36, 94, 46, 33]

print(*map(lambda x: x // 2 if x % 2 == 0 else x, filter(lambda x:  not (x > 47 and x % 2 != 0), numbers)))

# 232. Список data содержит информацию о численности населения некоторых штатов США. Напишите программу сортировки по убыванию списка data на основании последнего символа в названии штата. 
#      Затем распечатайте элементы этого списка, каждый на новой строке в формате: <название штата>: <численность населения>
#      Vermont: 626299
#      Massachusetts: 7029917
#      ...
# 
#      Примечание 1. Сортировка производится в лексикографическом порядке (по алфавиту) по убыванию на основании последнего символа в названии штата. 
#      При этом, если два штата имеют одинаковый последний символ, следует сохранить их взаиморасположение в начальном списке.
#      Примечание 2. Используйте анонимную функцию в качестве критерия сортировки.


data = [(19542209, 'New York'), (4887871, 'Alabama'), (1420491, 'Hawaii'), (626299, 'Vermont'), (1805832, 'West Virginia'), (39865590, 'California'), (11799448, 'Ohio'), (10711908, 'Georgia'), (10077331, 'Michigan'), (10439388, 'Virginia'), (7705281, 'Washington'), (7151502, 'Arizona'), (7029917, 'Massachusetts'), (6910840, 'Tennessee')]

for state in sorted(data, key=lambda x: x[1][-1], reverse=True):
    print(f'{state[1]}: {state[0]}')

# 233. Список data содержит слова на русском языке. Напишите программу, которая сортирует этот список по возрастанию длины слов. 
#      В случае, если длины каких-то слов совпадают, – отсортировать эти слова в лексикографическом порядке. Отсортированные слова следует вывести на одной строке, разделив символом пробела.
# 
#      Примечание 1. Используйте анонимную функцию в качестве критерия сортировки.

data = ['год', 'человек', 'время', 'дело', 'жизнь', 'день', 'рука', 'раз', 'работа', 'слово', 'место', 'лицо', 'друг', 'глаз', 'вопрос', 'дом', 'сторона', 'страна', 'мир', 'случай', 'голова', 'ребенок', 'сила', 'конец', 'вид', 'система', 'часть', 'город', 'отношение', 'женщина', 'деньги']

print(*sorted(data, key=lambda x: (len(x), x)))

# 234. Список mixed_list содержит целочисленные и строковые значения. Напишите программу, которая с помощью встроенной функции max() находит и выводит наибольшее числовое значение в указанном списке.
# 
#      Примечание 1. Для решения задачи используйте анонимную функцию и необязательный аргумент key  функции max().
#      Примечание 2. Обратите внимание, что сравнивать числа и строки нельзя.

mixed_list = ['tuesday', 'abroad', 'abuse', 'beside', 'monday', 'abate', 'accessory', 'absorb', 1384878, 'sunday', 'about', 454805, 'saturday', 'abort', 2121919, 2552839, 977970, 1772933, 1564063, 'abduct', 901271, 2680434, 'bicycle', 'accelerate', 1109147, 942908, 'berry', 433507, 'bias', 'bestow', 1875665, 'besides', 'bewilder', 1586517, 375290, 1503450, 2713047, 'abnormal', 2286106, 242192, 701049, 2866491, 'benevolent', 'bigot', 'abuse', 'abrupt', 343772, 'able', 2135748, 690280, 686008, 'beyond', 2415643, 'aboard', 'bet', 859105, 'accident', 2223166, 894187, 146564, 1251748, 2851543, 1619426, 2263113, 1618068, 'berth', 'abolish', 'beware', 2618492, 1555062, 'access', 'absent', 'abundant', 2950603, 'betray', 'beverage', 'abide', 'abandon', 2284251, 'wednesday', 2709698, 'thursday', 810387, 'friday', 2576799, 2213552, 1599022, 'accept', 'abuse', 'abound', 1352953, 'bid', 1805326, 1499197, 2241159, 605320, 2347441]

print(max(mixed_list, key=lambda x: x if isinstance(x, int) else 0))

# 235. Список mixed_list содержит целочисленные и строковые значения. Напишите программу его сортировки по неубыванию значений элементов, при этом числа должны следовать до строк.  
#      Элементы отсортированного списка выведите на одной строке, разделив символом пробела.
# 
#      Примечание 1. Для решения задачи используйте анонимную функцию и необязательный аргумент key  функции sorted().
#      Примечание 2. Если бы список mixed_list содержал значения:
#      mixed_list = ['a', 'ab', 3, 5, 1, 8, 0, 'c', 'ac', 'aab']
#      то результатом работы программы должно быть:
#      0 1 3 5 8 a aab ab ac c

mixed_list = ['beside', 48, 'accelerate', 28, 'beware', 'absorb', 'besides', 'berry', 15, 65, 'abate', 'thursday', 76, 70, 94, 35, 36, 'berth', 41, 'abnormal', 'bicycle', 'bid', 'sunday', 'saturday', 87, 'bigot', 41, 'abort', 13, 60, 'friday', 26, 13, 'accident', 'access', 40, 26, 20, 75, 13, 40, 67, 12, 'abuse', 78, 10, 80, 'accessory', 20, 'bewilder', 'benevolent', 'bet', 64, 38, 65, 51, 95, 'abduct', 37, 98, 99, 14, 'abandon', 'accept', 46, 'abide', 'beyond', 19, 'about', 76, 26, 'abound', 12, 95, 'wednesday', 'abundant', 'abrupt', 'aboard', 50, 89, 'tuesday', 66, 'bestow', 'absent', 76, 46, 'betray', 47, 'able', 11]

print(*(sorted(filter(lambda x: isinstance(x, int), mixed_list)) + sorted(filter(lambda x: isinstance(x, str), mixed_list))))

# 236. В цветовой схеме RGB цвета задаются с помощью трех компонентов:
#      R — интенсивность красной составляющей цвета;
#      G — интенсивность зеленой составляющей цвета;
#      B — интенсивность синей составляющей цвета.
#      Противоположные цвета задаются как RGB и (255-R)(255-G)(255-B). Считается, что такие цвета хорошо гармонируют друг с другом.
#      Напишите программу, которая по трем компонентам заданного цвета, находит компоненты противоположного цвета. 
# 
#      Формат входных данных
#      На вход программе подается строка, содержащая три целых неотрицательных числа, компоненты R, G и B начального цвета,  разделенные символом пробела.
# 
#      Формат выходных данных
#      Программа должна вывести три компонента R, G и B противоположного цвета, разделенные символом пробела.
# 
#      Примечание. Попробуйте решить задачу в одну строку с помощью встроенной функции map().

print(*map(lambda c: 255 - int(c), input().split()))

# 237. Многочленом степени n называется выражение вида a(n)x**n+a(n-1)x**n-1+...+a(2)x**2+a(1)x+a(0) где a(n), a(n-1) — коэффициенты многочлена (a(n)!=0).
#      На вход программе на первой строке подаются коэффициенты многочлена, разделенные символом пробела и целое число x на второй строке. 
#      Напишите программу, которая вычисляет значение указанного многочлена при заданном значении x.
# 
#      Формат входных данных
#      На вход программе на первой строке подаются коэффициенты многочлена (целые числа), разделенные символом пробела и целое число x на второй строке.
# 
#      Формат выходных данных
#      Программа должна вывести одно число — значение указанного многочлена при заданном значении x.

def evaluate(coefficients, x):
    lst = map(lambda y, z: int(y) * (x ** z), coefficients, range(len(coefficients))[::-1])    
    return __import__('functools').reduce(__import__('operator').add, list(lst), 0)

print(evaluate(input().split(), int(input())))

# 238. Функция ignore_command() принимает на вход один строковый аргумент command – команда, которую нужно проверить, и возвращает значение True, если в команде содержится подстрока из списка ignore и False – если нет.
#      def ignore_command(command):
#          ignore = ['alias', 'configuration', 'ip', 'sql', 'select', 'update', 'exec', 'del', 'truncate']
#          for word in ignore:
#              if word in command:
#                  return True
#          return False
#      Перепишите функцию ignore_command(), чтобы она использовала встроенные функции all()/any(), сохранив при этом ее функционал.
# 
#      Примечание 1. Следующий программный код:
#      print(ignore_command('get ip'))
#      print(ignore_command('select all'))
#      print(ignore_command('delete'))
#      print(ignore_command('trancate'))
#      должен выводить:
#      True
#      True
#      True
#      False
#      Примечание 2. Вызывать функцию ignore_command() не нужно, требуется только реализовать.

def ignore_command(command):
    ignore = ['alias', 'configuration', 'ip', 'sql', 'select', 'update', 'exec', 'del', 'truncate']
    return any(map(lambda x: x in command, ignore))

# 239. Используя параллельную итерацию сразу по трем спискам countries, capitals и population выведите информацию о стране в формате:
#      <capital> is the capital of <country>, population equal <population> people.
#      Moscow is the capital of Russia, population equal 145934462 people.
#      Washington is the capital of USA, population equal 331002651 people.
#      ...
#      Для каждой страны информацию выводить на отдельной строке. 

countries = ['Russia', 'USA', 'UK', 'Germany', 'France', 'India']
capitals = ['Moscow', 'Washington', 'London', 'Berlin', 'Paris', 'Delhi']
population = [145_934_462, 331_002_651, 80_345_321, 67_886_011, 65_273_511, 1_380_004_385]

for capital, country, population in zip(capitals, countries, population):
    print(f'{capital} is the capital of {country}, population equal {population} people.')

# 240. На вход программе подаются три строки текста с вещественными числами, значениями абсцисс (x), ординат (y) и аппликат (z) точек трехмерного пространства. 
#      Напишите программу для проверки расположения всех точек с введенными координатами внутри либо на поверхности шара с центром в начале координат и радиусом R=2.
# 
#      Формат входных данных
#      На вход программе подаются три строки текста с вещественными числами, разделенными символом пробела – абсциссы, ординаты и аппликаты точек в трехмерной системе координат.
# 
#      Формат выходных данных
#      Программа должна вывести True если все точки с введенными координатами находятся внутри или на границе шара и False, если вне.
# 
#      Примечание 1. Гарантируется, что количество чисел во всех трех строках одинаковое.
#      Примечание 2. Уравнение поверхности шара (сферы) имеет вид  x**2+y**2+z**2 = R ** 2
#      Примечание 3. Для решения задачи используйте встроенные функции all() и zip().
#      Примечание 4. Используйте следующие названия abscissas, ordinates, applicates для соответствующих списков.

abscissas = map(float, input().split())
ordinates = map(float, input().split())
applicates = map(float, input().split())

print(all(map(lambda x: x[0] ** 2 + x[1] ** 2 + x[2] ** 2 <= 2 ** 2, zip(abscissas, ordinates, applicates))))

# 241. IP-адрес – уникальный числовой идентификатор устройства в компьютерной сети, работающей по протоколу TCP/IP. В 4-й версии IP-адрес представляет собой 32-битное число. 
#      Адрес записывается в виде четырёх десятичных чисел (октетов) со значением от 0 до 255 (включительно), разделённых точками, например, 192.168.1.2.
#      Напишите программу с использованием встроенной функции all() для проверки корректности IP-адреса: все ли октеты в IP-адресе – числа со значением от 0 до 255.
# 
#      Формат входных данных
#      На вход программе подается строка в формате x.x.x.x, где x – непустой набор символов 0-9, a-z.
# 
#      Формат выходных данных
#      Программа должна вывести True если введенная строка – корректный IP-адрес и False в противном случае.
# 
#      Примечание. Ведущие нули следует игнорировать:
#      0001 = 1
#      006 = 6
#      0213 = 213
#      0000 = 0
#      00345 = 345
#      ...

print(all(map(lambda x: x.isdigit() and -1 < int(x) < 256, input().split('.'))))

# 242. На вход программе подаются два натуральных числа a и b. 
#      Напишите программу с использованием встроенной функции all() для обнаружения всех целых чисел в диапазоне [a;b], которые делятся на каждую содержащуюся в них цифру без остатка.
# 
#      Формат входных данных
#      На вход программе подаются два натуральных числа a и b на отдельных строках.
# 
#      Формат выходных данных
#      Программа должна вывести все числа из диапазона [a;b], удовлетворяющие условию задачи, на одной строке, разделяя их символом пробела.
# 
#      Примечание. Числа, содержащие нули, неинтересны, их выводить не нужно.

digits = [i for i in range(int(input()), int(input()) + 1) if '0' not in str(i)]

for d in digits:
    if all(d % int(x) == 0 for x in str(d)):
        print(d, end=' ')

# 243. Хороший пароль по условиям этой задачи состоит как минимум из 7 символов, содержит хотя бы одну цифру, заглавную и строчную букву. 
#      Напишите программу со встроенной функцией any() для определения хорош ли введенный пароль.
# 
#      Формат входных данных
#      На вход программе подаётся одна строка текста.
# 
#      Формат выходных данных
#      Программа должна вывести YES, если строка – хороший пароль, и NO в противном случае.

s = input()
print(['NO', 'YES'][all([any(map(lambda x: x.isupper(), s)), any(map(lambda x: x.islower(), s)), any(map(lambda x: x.isdigit(), s)), len(s) > 6])])

# 244. Учитель Тимур проверял контрольные работы по математике в нескольких классах онлайн-школы BEEGEEK и решил убедиться, что в каждом классе есть хотя бы один отличник – ученик с оценкой 5 по контрольной работе. 
#      Напишите программу с использованием встроенных функций all(), any() для помощи Тимуру в проверке.
# 
#      Формат входных данных
#      На вход программе подается натуральное число n – количество классов. Затем для каждого класса вводится блок информации вида:
#      - натуральное число k – количество учеников в классе;
#      - далее вводится k строк вида: фамилия оценка.
# 
#      Формат выходных данных
#      Программа должна вывести YES, если в каждом классе есть хотя бы один отличник, и NO в противном случае.

print(['NO', 'YES'][all([any(['5' in input().split() for _ in range(int(input()))]) for _ in range(int(input()))])])