# 173. Напишите программу, которая с помощью модуля random моделирует броски монеты. Программа принимает на вход количество попыток и выводит результаты бросков: Орел или Решка (каждое на отдельной строке).
# 
#      Примечание. Например, при n=7 ваша программа может выводить:
#      Орел
#      Решка
#      Решка
#      Орел
#      Орел
#      Орел
#      Решка

for _ in range(int(input())):
    print(__import__('random').choice(['Орел', 'Решка']))

# 174. Напишите программу, которая с помощью модуля random моделирует броски игрального кубика c 6 гранями. 
#      Программа принимает на вход количество попыток и выводит результаты бросков — выпавшее число, которое написано на грани кубика (каждое на отдельной строке).
# 
#      Примечание. Например, при n=7 ваша программа может выводить:
#      5
#      5
#      6
#      6
#      2
#      6
#      2

for _ in range(int(input())):
    print(__import__('random').randint(1, 6))

# 175. Напишите программу, которая с помощью модуля random генерирует случайный пароль. Программа принимает на вход длину пароля и выводит случайный пароль, 
#      содержащий только символы английского алфавита a..z, A..Z (в нижнем и верхнем регистре).
# 
#      Примечание 1. Символам A..Z английского языка соответствуют номера с 65 по 90 в таблице символов ASCII.
#      Примечание 2. Символам a..z английского языка соответствуют номера с 97 по 122 в таблице символов ASCII.
#      Примечание 3. Используйте функцию chr() для получения символа по его номеру в таблице символов ASCII.
#      Примечание 4. Например, при длине пароля, равной 15 символам, ваша программа может выводить: peJFAmhqfaAeKDu

from random import randint

length = int(input())
password = ''

while len(password) != length:
    c = chr(randint(65, 122))
    if c.isalpha():
        password += c

print(password)

# 176. Лотерейный билет содержит 7 чисел из диапазона от 1 до 49 (включительно). Напишите программу, которая с помощью модуля random генерирует 7 различных случайных чисел для лотерейного билета. 
#      Программа должна вывести числа в порядке возрастания на одной строке через один символ пробела.
# 
#      Примечание. Убедитесь, что сгенерированные числа не содержат дубликатов.

ticket = set()
while len(ticket) != 7:
    ticket.add(__import__('random').randint(1, 49))

print(*sorted(ticket), sep=' ')

# 177. IP адрес состоит из четырех чисел из диапазона от 0 до 255 (включительно) разделенных точкой.
#      Напишите функцию generate_ip(), которая с помощью модуля random  генерирует и возвращает случайный корректный IP адрес.
# 
#      Примечание 1. Пример правильного (неправильного) IP адреса:
#      192.168.5.250        # правильный
#      199.300.521.255      # неправильный
#      Примечание 2. Вызывать функцию generate_ip() не нужно, требуется только реализовать.

def generate_ip():
    return '.'.join([str(__import__('random').randint(0, 255)) for _ in range(4)])

# 178. Почтовый индекс в Латверии имеет вид: 
#      LetterLetterNumber_NumberLetterLetter
#      где Letter – заглавная буква английского алфавита, Number – число от 0 до 99 (включительно).
#      Напишите функцию generate_index(), которая с помощью модуля random генерирует и возвращает случайный корректный почтовый индекс Латверии.
# 
#      Примечание 1. Пример правильного (неправильного) индекса Латверии:
#      AB23_56VG          # правильный
#      V3F_231GT          # неправильный
#      Примечание 2. Обратите внимание на символ _ в почтовом индексе.
#      Примечание 3. Вызывать функцию generate_index() не нужно, требуется только реализовать.

from random import choice, randint
from string import ascii_uppercase


def generate_index():
    return f'{choice(ascii_uppercase)}{choice(ascii_uppercase)}{randint(0, 99)}_{randint(0, 99)}{choice(ascii_uppercase)}{choice(ascii_uppercase)}'

# 179. Напишите программу, которая с помощью модуля random перемешивает случайным образом содержимое матрицы (двумерного списка).
#      Примечание. Выводить содержимое матрицы не нужно.

matrix = [[1, 2, 3, 4],
          [5, 6, 7, 8],
          [9, 10, 11, 12],
          [13, 14, 15, 16]]

__import__('random').shuffle(matrix)

# 180. Напишите программу, которая с помощью модуля random генерирует 100 случайных номеров лотерейных билетов и выводит их каждый на отдельной строке. 
#      Обратите внимание, вы должны придерживаться следующих условий:
#      - номер не может начинаться с нулей;
#      - номер лотерейного билета должен состоять из 7 цифр;
#      - все 100 лотерейных билетов должны быть различными.

tickets = set()

while len(tickets) != 100:
    tickets.add(__import__('random').randint(1000000, 9999999))
    
print(*tickets, sep='\n')

# 181. Анаграмма – это слово образованное путём перестановки букв, составляющих другое слово. Например, слова пила и липа или пост и стоп – анаграммы.
#      Напишите программу, которая считывает одно слово и выводит с помощью модуля random его случайную анаграмму.
# 
#      Примечание. Обратите внимание на то, что метод shuffle() работает со списком, а не со строкой.

word = list(input())

__import__('random').shuffle(word)
print(*word, sep='')

# 182. Для игры в бинго требуется карточка размером 5×5, содержащая различные (уникальные) целые числа от 1 до 75 (включительно), при этом центральная клетка является пустой (она заполняется числом 0).
#      Напишите программу, которая с помощью модуля random генерирует и выводит случайную карточку для игры в бинго.
# 
#      Примечание 1. Для наглядности рекомендуем отводить на вывод каждого числа ровно 3 символа. Для этого используйте строковый метод ljust().
#      Примечание 2. Пример возможного ответа:
#      1  16 31 46 61
#      10 30 42 47 68
#      3  18 0  48 63
#      9  19 34 49 70
#      5  20 35 50 65
#      Возможны и другие способы генерации карточки для игры в бинго.

numbers = __import__('random').sample([*range(1, 76)], 25)
mtrx = [[str(numbers.pop()) for _ in range(5)] for _ in range(5)]
mtrx[2][2] = str(0)

for row in mtrx:
    print(*[r.ljust(3) for r in row])

# 183. Напишите программу, которая случайным образом назначает каждому ученику его тайного друга, который будет вместе с ним решать задачи по программированию.
# 
#      Формат входных данных
#      На вход программе в первой строке подается число n – общее количество учеников. Далее идут n строк, содержащих имена и фамилии учеников.
# 
#      Формат выходных данных
#      Программа должна вывести имя и фамилию ученика (в соответствии с исходным порядком) и имя и фамилию его тайного друга, разделённые дефисом.
# 
#      Примечание 1. Обратите внимание, что нельзя быть тайным другом самому себе и нельзя быть тайным другом для нескольких учеников.
#      Примечание 2. Приведенные ниже тесты это лишь образцы возможного ответа. Возможны и другие способы выбора тайных друзей.

students = [input() for _ in range(int(input()))]
__import__('random').shuffle(students)

for i in range(len(students)):
    print(f'{students[i]} - {students[i-1]}')

# 184. Напишите программу, которая с помощью модуля random генерирует n паролей длиной m символов, состоящих из строчных и прописных английских букв и цифр, кроме тех, которые легко перепутать между собой:
#      «l» (L маленькое);
#      «I» (i большое);
#      «1» (цифра);
#      «o» и «O» (маленькая и большая буквы);
#      «0» (цифра).
# 
#      Формат входных данных
#      На вход программе подаются два числа n и m, каждое на отдельной строке.
# 
#      Формат выходных данных
#      Программа должна вывести n паролей длиной m символов в соответствии с условием задачи, каждый на отдельной строке.
# 
#      Примечание 1. Считать, что числа n и m всегда таковы, что требуемые пароли сгенерировать возможно.
#      Примечание 2. В каждом пароле необязательно должна присутствовать хотя бы одна цифра и буква в верхнем и нижнем регистре.
#      Примечание 3. Решение задачи удобно оформить в виде двух вспомогательных функций:
#      - функция generate_password(length) – возвращает случайный пароль длиной length символов;
#      - функция generate_passwords(count, length) – возвращает список, состоящий из count случайных паролей длиной length символов.
#      Примечание 4. Приведенные ниже тесты – это лишь образцы возможного ответа. Возможны и другие способы генерации паролей.

import random
import string


def generate_password(length):
    numbers = list(map(str, range(2, 10)))
    letters = [char for char in string.ascii_letters if char not in ('l', 'I', 'o', 'O')]
    password = random.sample(numbers + letters, length)
    return password

def generate_passwords(count, length):
    password_lst = [generate_password(length) for _ in range(count)]
    for password in password_lst:
        print(*password, sep='')

n, m = int(input()), int(input())

generate_password(m)
generate_passwords(n, m)

# 185. Напишите программу, которая с помощью модуля random генерирует n паролей длиной m символов, состоящих из строчных и прописных английских букв и цифр, кроме тех, которые легко перепутать между собой:
#      «l» (L маленькое);
#      «I» (i большое);
#      «1» (цифра);
#      «o» и «O» (маленькая и большая буквы);
#      «0» (цифра).
#      Дополнительное условие: в каждом пароле обязательно должна присутствовать хотя бы одна цифра и как минимум по одной букве в верхнем и нижнем регистре.
#      
#      Формат входных данных
#      На вход программе подаются два числа n и m, каждое на отдельной строке.
# 
#      Формат выходных данных
#      Программа должна вывести n паролей длиной m символов в соответствии с условием задачи, каждый на отдельной строке.
# 
#      Примечание 1. Считать, что числа n и m всегда таковы, что требуемые пароли сгенерировать возможно.
#      Примечание 2. В каждом пароле необязательно должна присутствовать хотя бы одна цифра и буква в верхнем и нижнем регистре.
#      Примечание 3. Решение задачи удобно оформить в виде двух вспомогательных функций:
#      - функция generate_password(length) – возвращает случайный пароль длиной length символов;
#      - функция generate_passwords(count, length) – возвращает список, состоящий из count случайных паролей длиной length символов.
#      Примечание 4. Приведенные ниже тесты – это лишь образцы возможного ответа. Возможны и другие способы генерации паролей.

import random
import string


def generate_password(length):
    numbers = list(map(str, range(2, 10)))
    up_letters = [char for char in string.ascii_uppercase if char not in ('I', 'O')]
    low_letters = [char for char in string.ascii_lowercase if char not in ('l', 'o')]
    password = random.sample(random.sample(numbers, 1) + random.sample(up_letters, 1) + random.sample(low_letters, 1) + random.sample(numbers + up_letters + low_letters, length - 3), length)
    return password
        

def generate_passwords(count, length):
    password_lst = [generate_password(length) for _ in range(count)]
    for password in password_lst:
        print(*password, sep='')

n, m = int(input()), int(input())

generate_password(m)
generate_passwords(n, m)