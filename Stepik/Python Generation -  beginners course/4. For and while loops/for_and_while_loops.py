# 96. Напишите программу, которая выводит слова «Python is awesome!» (без кавычек) 10 раз.
#     Программа должна вывести 10 раз текст «Python is awesome!», каждый на отдельной строке.

for i in range(10):
    print('Python is awesome!')

# 97. Дано предложение и количество раз которое его надо повторить. Напишите программу, которая повторяет
#     данное предложение нужное количество раз.
#     В первой строке записано текстовое предложение, во второй — количество повторений. Программа
#     должна вывести указанное текстовое предложение нужное количество раз. Каждое повторение должно
#     начинаться с новой строки.

a = input()
b = int(input())
for i in range(b):
    print(a)

# 98. Напишите программу, которая использует ровно три цикла for для печати следующей последовательности
#     символов.

for i in range(6):
    print('AAA')
for i in range(5):
    print('BBBB')
print('E')          
for i in range(9):
    print('TTTTT')
print('G')

# 99. На вход программе подается натуральное число n. Напишите программу, которая печатает звездный
#     прямоугольник размерами n×19.
#     На вход программе подаётся натуральное число n∈[1;20] — высота звездного прямоугольника. Программа
#     должна вывести звездный прямоугольник размерами n×19.

n = int(input())
for i in range(n):
    print('*******************')

# 100. Напишите программу, которая считывает одну строку текста и выводит 10 строк, пронумерованных от
#      0 до 9, каждая с указанной строкой текста.
#      На вход программе подается одна строка текста. Программа должна вывести десять строк в соответствии
#      с условием задачи.

x = input()
for i in range(10):
    print(i, x)

# 101. На вход программе подается натуральное число n. Напишите программу, которая для каждого из чисел
#      от 00 до n (включительно) выводит фразу: «Квадрат числа [число] равен [число]» (без кавычек).
#      На вход программе подается натуральное число n. Программа должна вывести текст в соответствии с
#      условием задачи.

x = int(input())
for i in range(x + 1):
    print('Квадрат числа', i, 'равен', i ** 2)

# 102. На вход программе подается натуральное число n(n≥2) – катет прямоугольного равнобедренного
#      треугольника.
#      Напишите программу, которая выводит звездный треугольник в соответствии с примером. На вход
#      программе подается одно натуральное число n(n≥2).

n = int(input())
for i in range(n):
    print('*' * (n - i))

# 103. На вход программе подается три натуральных числа p, n:
#      •	m:m: стартовое количество организмов;
#      •	p:p: среднесуточное увеличение в %;
#      •	n:n: количество дней для размножения.
#      Напишите программу, которая предсказывает размер популяции организмов. Программа должна
#      выводить размер популяции в каждый день, начиная с 11 и заканчивая n-м днем. На вход программе
#      подается три натуральных числа.

m = int(input())
p = int(input())
n = int(input())
for i in range(n):
    print(i + 1, m)
    m = m + m * p / 100

# 104. Даны два целых числа m и n (m≤n). Напишите программу, которая выводит все числа
#      от m до n включительно.

m = int(input())
n = int(input())
for i in range(m, n + 1):
    print(i)

# 105. Даны два целых числа m и n. Напишите программу, которая выводит все числа от m до n включительно в
#      порядке возрастания, если m<n, или в порядке убывания в противном случае.

m = int(input())
n = int(input())
if m > n:
    for i in range(m, n - 1, -1):
        print(i)
elif m < n:
    for i in range(m, n + 1):
        print(i)
elif m == n:
    print(m)

# 106. Даны два целых числа m и n (m>n). Напишите программу, которая выводит все нечетные числа
#      от m до n включительно в порядке убывания.

m = int(input())
n = int(input())
for i in range(m, n - 1, -1):
    if i % 2 != 0:
        print(i)

#107. Даны два натуральных числа m и n (m≤n). Напишите программу, которая выводит все числа
#     от m до n включительно удовлетворяющие хотя бы одному из условий:
#     •	число кратно 17;
#     •	число оканчивается на 9;
#     •	число кратно 3 и 5 одновременно.
#     На вход программе подаются два натуральных числа m и n (m≤n), каждое на отдельной строке. Программа
#     должна вывести числа в соответствии с условием задачи. Если чисел удовлетворяющих условию нет,
#     выводить ничего не надо.

m = int(input())
n = int(input())
for i in range(m, n + 1):
    if (i % 17 == 0) or (i % 10 == 9) or (i % 3 == 0 and i % 5 == 0):
        print(i)

# 108. Дано натуральное число n. Напишите программу, которая выводит таблицу умножения на n.
#      На вход программе подается натуральное число. Программа должна вывести таблицу умножения на
#      введенное число.

n = int(input())
for i in range(10):
    print(n, 'x', i + 1, '=', n * (i + 1))

# 109. На вход программе подаются два целых числа a и b (a ≤ b). Напишите программу, которая подсчитывает
#      количество чисел в диапазоне от a до b включительно, куб которых оканчивается на 44 или 99.

a = int(input())
b = int(input())
counter = 0
for i in range(a, b + 1):
    if i ** 3 % 10 == 4 or i ** 3 % 10 == 9:
        counter += 1
print(counter)

# 110. На вход программе подается натуральное число n, а затем n целых чисел, каждое на отдельной строке.
#      Напишите программу, которая подсчитывает сумму введенных чисел. 
#      На вход программе подаются натуральное число n, а затем n целых чисел, каждое на отдельной строке.
#      Программа должна вывести сумму данных чисел.

total = 0
n = int(input())
for i in range(n):
    num = int(input())
    total = total + num
print(total)

# 111. На вход программе подается натуральное число n. Напишите программу, которая вычисляет значение
#      выражения (1+1/2 +1/1+…+1/n)−ln(n).
#      Для вычисления натурального логарифма воспользуйтесь функцией log(n), которая находится в
#      модуле math.

from math import *
total = 0
n = int(input())
for i in range(1, n + 1):
    total = total + 1 / i
print(total - log(n))

# 112. На вход программе подается натуральное число n. Напишите программу, которая подсчитывает сумму тех
#      чисел от 1 до n (включительно) квадрат которых оканчивается на 2 5 или 8.
#      На вход программе подается натуральное число n. Программа должна вывести единственное число в
#      соответствии с условием задачи. Если таких чисел нет в указанном диапазоне, то следует вывести 0.

total = 0
n = int(input())
for i in range(1, n + 1):
    if i ** 2 % 10 == 2 or i ** 2 % 10 == 5 or i ** 2 % 10 == 8:
        total = total + i
print(total)

# 113. На вход программе подается натуральное число n. Напишите программу, которая вычисляет n!.
#      На вход программе подается натуральное число n, (n ≤ 12). Программа должна вывести единственное
#      число в соответствии с условием задачи. Факториалом натурального числа n, называется произведение
#      всех натуральных чисел от 1 до n, то есть n!=1⋅2⋅3⋅…⋅n

total = 1
n = int(input())
for i in range(n):
    total = total * (i + 1)
print(total)

# 114. Напишите программу, которая считывает 10 чисел и выводит произведение отличных от нуля чисел.
#      На вход программе подаются 10 целых чисел, каждое на отдельной строке. Программа должна
#      вывести произведение отличных от нуля чисел. Гарантируется, что хотя бы одно из 10 чисел
#      является ненулевым.

total = 1
for i in range(1, 11):
    num = int(input())
    if num != 0:
        total = total * num
print(total)

# 115. На вход программе подается натуральное число n. Напишите программу, которая вычисляет сумму всех
#      его делителей.

total = 0
n = int(input())
for i in range(1, n + 1):
    if n % i == 0:
        total += i
print(total)

# 116. На вход программе подается натуральное число n. Напишите программу вычисления знакочередующей
#      суммы 1−2+3−4+5−6+…+(−1)n+1n.

total = 0
n = int(input())
for i in range(1, n + 1):
    total = total + (-1) ** (i + 1) * i
print(total)

# 117. На вход программе подается натуральное число n, а затем n различных натуральных чисел, каждое на
#      отдельной строке. Напишите программу, которая выводит наибольшее и второе наибольшее число
#      последовательности.
#      На вход программе подаются натуральное число n ≥ 2, а затем n различных натуральных чисел, каждое на
#      отдельной строке. Программа должна вывести два наибольших числа, каждое на отдельной строке.

largest1 = 0
largest2 = 0
n = int(input())
for i in range(1, n + 1):
    num = int(input())
    if num > largest1:
        largest2 = largest1
        largest1 = num
    elif num > largest2:
        largest2 = num
print(largest1)
print(largest2)

# 118. Напишите программу, которая считывает последовательность из 10 целых чисел и определяет является
#      ли каждое из них четным или нет.
#      На вход программе подаются 10 целых чисел, каждое на отдельной строке. Программа должна вывести
#      строку «YES», если все числа четные и «NO» в ином случае.

counter = 0
for i in range(1, 11):
    num = int(input())
    if num % 2 == 0:
        counter = counter + 1
if counter == 10:
    print('YES')
else:
    print('NO')

# 119. Напишите программу, которая считывает натуральное число n и выводит первые n чисел
#      последовательности Фибоначчи.
#      На вход программе подается одно число n (n ≤ 100) – количество членов последовательности. Программа
#      должна вывести члены последовательности Фибоначчи, отделенные символом пробела.
#      Последовательность Фибоначчи – это последовательность натуральных чисел, где каждое последующее
#      число является суммой двух предыдущих.

f1 = 0
f2 = 1
n = int(input())
for i in range(1, n + 1):
    f1, f2 = f2, f1 + f2
    print(f1, end=' ')

# 120. На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом
#      последовательности является слово «КОНЕЦ» (без кавычек). Напишите программу, которая выводит
#      члены данной последовательности.
#      На вход программе подается последовательность слов, каждое слово на отдельной строке.
#      Программа должна вывести члены данной последовательности.

word = input()
while word != 'КОНЕЦ':
    print(word)
    word = input()

# 121. На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом
#      последовательности является слово «КОНЕЦ» или «конец» (большими или маленькими буквами, без
#      кавычек). Напишите программу, которая выводит члены данной последовательности.
#      На вход программе подается последовательность слов, каждое слово на отдельной строке.
#      Программа должна вывести члены данной последовательности.

word = input()
while word != 'КОНЕЦ' and word != 'конец':
    print(word)
    word = input()

# 122. На вход программе подается последовательность слов, каждое слово на отдельной строке. Концом
#      последовательности является одно из трех слов: «стоп», «хватит», «достаточно» (маленькими буквами,
#      без кавычек). Напишите программу, которая выводит общее количество членов данной
#      последовательности.
#      На вход программе подается последовательность слов, каждое слово на отдельной строке.
#      Программа должна вывести общее количество членов данной последовательности.

x = input()
total = 0
while x != 'стоп' and x != 'хватит' and x != 'достаточно':
    total += 1
    x = input()
print(total)

# 123. На вход программе подается последовательность целых чисел делящихся на 77, каждое число на
#      отдельной строке. Концом последовательности является любое число не делящееся на 77. Напишите
#      программу, которая выводит члены данной последовательности.
#      На вход программе подается последовательность чисел, каждое число на отдельной строке.
#      Программа должна вывести члены данной последовательности.

x = int(input())
while x % 7 == 0:
    print(x)
    x = int(input())

# 124. На вход программе подается последовательность целых чисел, каждое число на отдельной строке. Концом
#      последовательности является любое отрицательное число. Напишите программу, которая выводит сумму
#      всех членов данной последовательности.
#      На вход программе подается последовательность чисел, каждое число на отдельной строке.
#      Программа должна вывести сумму членов данной последовательности.

x = int(input())
total = 0
while x >= 0:
    total += x
    x = int(input())
print(total)

# 125. На вход программе подается последовательность целых чисел от 11 до 55, характеризующее оценку
#      ученика, каждое число на отдельной строке. Концом последовательности является любое отрицательное
#      число, либо число большее 55. Напишите программу, которая выводит количество пятерок.
#      На вход программе подается последовательность чисел, каждое число на отдельной строке.
#      Программа должна вывести количество пятерок.

x = int(input())
counter = 0
while 0 <= x <= 5:
    if x == 5:
        counter += 1
    x = int(input())
print(counter)

# 126. Всем известно, что ведьмак способен одолеть любых чудовищ, однако его услуги обойдутся недешево, к
#      тому же ведьмак не принимает купюры, он принимает только чеканные монеты. В мире ведьмака
#      существуют монеты с номиналами 1,5,10,25.
#      Напишите программу, которая определяет какое минимальное количество чеканных монет нужно
#      заплатить ведьмаку.
#      На вход программе подается одно натуральное число, цена за услугу ведьмака.
#      Программа должна вывести минимально возможное количество чеканных монет для оплаты.

x = int(input())
counter = 0
while x >= 25:
    counter += 1
    x = x - 25
while x >= 10:
    counter += 1
    x = x - 10
while x >= 5:
    counter += 1
    x = x - 5
while x >= 1:
    counter += 1
    x = x - 1    
print(counter)

# 127. Дано натуральное число. Напишите программу, которая выводит его цифры в столбик в обратном порядке.
#      На вход программе подается одно натуральное число.
#      Программа должна вывести цифры введенного числа в столбик в обратном порядке.

n = int(input())
while n != 0:
    last_digit = n % 10
    n = n // 10
    print(last_digit)

# 128. Дано натуральное число. Напишите программу, которая меняет порядок цифр числа на обратный.
#      На вход программе подается одно натуральное число.
#      Программа должна вывести число, записанное в обратном порядке.

n = int(input())
while n != 0:
    last_digit = n % 10
    n = n // 10
    print(last_digit, end='')

# 129. Дано натуральное число n,(n≥10). Напишите программу, которая определяет его максимальную и
#      минимальную цифры.
#      На вход программе подается одно натуральное число.
#      Программа должна вывести максимальную и минимальную цифры введенного числа (с поясняющей
#      надписью).

n = int(input())
biggest = 0
smallest = 9
while n != 0:
    last_digit = n % 10
    if last_digit > biggest:
        biggest = last_digit
    if last_digit < smallest:
        smallest = last_digit
    n = n // 10
print('Максимальная цифра равна', biggest)
print('Минимальная цифра равна', smallest)

# 130. Дано натуральное число. Напишите программу, которая вычисляет:
#
#      •	сумму его цифр;
#      •	количество цифр в нем;
#      •	произведение его цифр;
#      •	среднее арифметическое его цифр;
#      •	его первую цифру;
#      •	сумму его первой и последней цифры.
#
#      На вход программе подается одно натуральное число.
#      Программа должна вывести значения указанных величин в указанном порядке.

n = int(input())
summa = 0
counter = 0
proizv = 1
sred = 0
first = n % 10
while n != 0:
    last_digit = n % 10
    summa += last_digit
    counter += 1
    proizv *= last_digit
    n = n // 10
sred = summa / counter
print(summa)
print(counter)
print(proizv)
print(sred)
print(last_digit)
print(first + last_digit)

# 131. Дано натуральное число n(n>9). Напишите программу, которая определяет его вторую (с начала) цифру.
#      На вход программе подается одно натуральное число, состоящее как минимум из двух цифр.
#      Программа должна вывести его вторую (с начала) цифру.

n = int(input())
while n > 9:
    last_digit = n % 10
    n = n // 10
print(last_digit)

# 132. Дано натуральное число. Напишите программу, которая определяет, состоит ли указанное число из
#      одинаковых цифр.
#      На вход программе подается одно натуральное число.
#      Программа должна вывести «YES» если число состоит из одинаковых цифр и «NO» в противном случае.

n = int(input())
counter1 = 0
counter2 = 0
last = n % 10
while n != 0:
    last_digit = n % 10
    counter1 += 1
    if last == last_digit:
        counter2 += 1
    n = n // 10
if counter1 == counter2:
    print('YES')
else:
    print('NO')

# 133. Дано натуральное число. Напишите программу, которая определяет, является ли последовательность его
#      цифр при просмотре справа налево упорядоченной по неубыванию.
#      На вход программе подается одно натуральное число.
#      Программа должна вывести «YES» если последовательность его цифр при просмотре справа налево
#      является упорядоченной по неубыванию и «NO» в противном случае.

n = int(input())
counter1 = 0
counter2 = 0
last = n % 10
while n != 0:
    last_digit = n % 10
    counter1 += 1
    if last <= last_digit:
        last = last_digit
        counter2 += 1
    n = n // 10
if counter1 == counter2:
    print('YES')
else:
    print('NO')

# 134. На вход программе подается число n > 1. Напишите программу, которая выводит его наименьший
#      отличный от 11 делитель.
#      На вход программе подается одно натуральное число n.
#      Программа должна вывести наименьший делитель отличный от 11. 
#      Используйте оператор break при обнаружении делителя.

n = int(input())
flag = False
for i in range(1, n+1):
    if n % i == 0 and i != 1:
        flag = True
        break
if flag == True:
    print(i)

# 135. На вход программе подается натуральное число n. Напишите программу, которая выводит числа
#      от 11 до n включительно за исключением:
#      •	чисел от 55 до 99 включительно;
#      •	чисел от 1717 до 3737 включительно;
#      •	чисел от 7878 до 8787 включительно.
#      На вход программе подается одно натуральное число n.
#      Программа должна вывести числа в соответствии с условием задачи, каждое на отдельной строке.
#      Используйте оператор continue.

n = int(input())
for i in range(1, n + 1):
    if 5 <= i <= 9 and 17 <= i <= 37 and 78 <= i <= 87:
        continue
    print(i)

# 136. На обработку поступает последовательность из 10 целых чисел. Известно, что вводимые числа по
#      абсолютной величине не превышают 10**6. Нужно написать программу, которая выводит на экран
#      количество неотрицательных чисел последовательности и их произведение. Если неотрицательных чисел
#      нет, требуется вывести на экран «NO». Программист торопился и написал программу неправильно.
#      Найдите все ошибки в этой программе (их ровно 4). Известно, что каждая ошибка затрагивает только одну
#      строку и может быть исправлена без изменения других строк.
#      Число x не превышает по абсолютной величине 10**6, если −10**6 ≤ x  ≤ 10**6.
#      При необходимости вы можете добавить необходимые строки кода.

count = 0
p = 1
for i in range(1, 10 + 1):
    x = int(input())
    if x >= 0:
        p = p * x
        count = count + 1
if count > 0:
    print(count)
    print(p)
else:
    print('NO')

# 137. На обработку поступает последовательность из 10 целых чисел. Известно, что вводимые числа по
#      абсолютной величине не превышают 10**6. Нужно написать программу, которая выводит на экран сумму
#      всех отрицательных чисел последовательности и максимальное отрицательное число в
#      последовательности. Если отрицательных чисел нет, требуется вывести на экран «NO». Программист
#      торопился и написал программу неправильно.
#      Найдите все ошибки в этой программе (их ровно 55). Известно, что каждая ошибка затрагивает только одну
#      строку и может быть исправлена без изменения других строк.
#      Число x не превышает по абсолютной величине 10**6, если −10**6 ≤ x  ≤ 10*6.
#      При необходимости вы можете добавить необходимые строки кода.

mx = -10**6 -1
s = 0
for i in range(1, 11):
    x = int(input())
    if x < 0:
        s = s + x
    if x > mx and x < 0:
        mx = x
if s < 0:
    print(s)
    print(mx)
else:
    print('NO')

# 138. На обработку поступает последовательность из 7 целых чисел. Известно, что вводимые числа по
#      абсолютной величине не превышают 10**6. Нужно написать программу, которая подсчитывает и
#      выводит сумму всех чётных чисел последовательности или 00, если чётных чисел в последовательности
#      нет. Программист торопился и написал программу неправильно.
#      Найдите все ошибки в этой программе (их ровно 4). Известно, что каждая ошибка затрагивает только одну
#      строку и может быть исправлена без изменения других строк.
#      Число x не превышает по абсолютной величине 10**6, если −10**6 ≤ x  ≤ 10**6.
#      При необходимости вы можете добавить необходимые строки кода.

s = 0
for i in range(1, 8):
    n = int(input())
    if n % 2 == 0:
        s = s + n
if s > 0:
    print(s)
else:
    print(0)

# 139. На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран
#      максимальную цифру числа, кратную 3. Если в числе нет цифр, кратных 3, требуется на экран вывести
#      «NO». Программист торопился и написал программу неправильно.
#      Найдите все ошибки в этой программе (их ровно 5). Известно, что каждая ошибка затрагивает только одну
#      строку и может быть исправлена без изменения других строк.
#      Число 0 делится на любое натуральное число.
#      При необходимости вы можете добавить нужные строки кода.

n = int(input())
max_digit = -1
while n > 0:
    digit = n % 10
    if digit % 3 == 0:
        if digit > max_digit:
            max_digit = digit
    n = n // 10
if max_digit < 0:
    print('NO')
else:
    print(max_digit)

# 140. На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран его
#      первую (старшую) цифру. Программист торопился и написал программу неправильно.
#      Найдите все ошибки в этой программе (их ровно 2). Известно, что каждая ошибка затрагивает только одну
#      строку и может быть исправлена без изменения других строк.

n = int(input())
while n != 0:
    digit = n % 10
    n //= 10
print(digit)

# 141. На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран
#      произведение цифр введенного числа. Программист торопился и написал программу неправильно.
#      Найдите все ошибки в этой программе (их ровно 3). Известно, что каждая ошибка затрагивает только одну
#      строку и может быть исправлена без изменения других строк.

n = int(input())
product = 1
while n != 0:
    digit = n % 10
    product = product * digit
    n //= 10
print(product)

# 142. Дано натуральное число n, (n≤ 9). Напишите программу, которая печатает таблицу
#      размером n×3 состоящую из данного числа (числа отделены одним пробелом).
#      На вход программе подается одно натуральное число.
#      Программа должна вывести таблицу размером n×3 состоящую из данного числа.
#      В конце строки может быть пробел.

n = int(input())
for i in range(1, n + 1):
    for j in range(n, n + 3):
        print(n, end=' ')
    print()

# 143. Дано натуральное число n, (n≤ 9). Напишите программу, которая печатает таблицу размером n×5, где в i-ой
#      строке указано число i (числа отделены одним пробелом).
#      На вход программе подается одно натуральное число.
#      Программа должна вывести таблицу размером n×5 в соответствии с условием.
#      В конце строки может быть пробел.

n = int(input())
for i in range(1, n + 1):
    for j in range(n, n + 5):
        print(i, end=' ')
    print()

# 144. Дано натуральное число n, (n≤ 9). Напишите программу, которая печатает таблицу сложения для всех чисел
#      от 1 до n в соответствии с примером.
#      На вход программе подается одно натуральное число.
#      Программа должна вывести таблицу сложения для всех чисел от 1 до n.
#      В конце строки может быть пробел.

n = int(input())
for i in range(1, n + 1):
    for j in range(1, 10):
        print(i, '+', j, '=', i + j, end='\n')
    print()

# 145. Дано нечетное натуральное число n. Напишите программу, которая печатает равнобедренный звездный
#      треугольник с основанием, равным n в соответствии с примером:
#      *
#      **
#      ***
#      ****
#      ***
#      **
#      *
#      На вход программе подается одно нечетное натуральное число.
#      Программа должна вывести треугольник в соответствии с условием.

n = int(input())
for i in range(n//2 + 1):
    for j in range(i + 1):
        print('*', end='')
    print()
for i in range(n//2, 0, -1):
    for j in range(i):
        print('*', end='')
    print()



# 146. Дано натуральное число n. Напишите программу, которая печатает численный треугольник в соответствии
#      с примером:
#      1
#      22
#      333
#      4444
#      55555
#      ...
#      На вход программе подается одно натуральное число.
#      Программа должна вывести треугольник в соответствии с условием.

n = int(input())
for i in range(1, n + 1):
    for j in range(i):
        print(i, end='')
    print()

# 147. Дано натуральное число n. Напишите программу, которая печатает численный треугольник с высотой
#      равной n, в соответствии с примером:
#      1
#      2 3
#      4 5 6
#      7 8 9 10
#      11 12 13 14 15
#      16 17 18 19 20 21
#      ...
#      На вход программе подается одно натуральное число.
#      Программа должна вывести треугольник в соответствии с условием.

n = int(input())
counter = 0
for i in range(1, n + 1):
    for j in range(i):
        counter += 1
        print(counter, end=' ')
    print()

# 148. Дано натуральное число n. Напишите программу, которая печатает численный треугольник с высотой
#      равной n, в соответствии с примером:
#      1
#      121
#      12321
#      1234321
#      123454321
#      ...
#      На вход программе подается одно натуральное число.
#      Программа должна вывести треугольник в соответствии с условием.

n = int(input())
for i in range(1, n + 1):
    for j in range(i):
        print(j + 1, end='')
    for k in range(i - 1, 0, - 1):
        print(k, end='')    
    print()

# 149. На вход программе подается два натуральных числа a и b (a< b). Напишите программу, которая находит
#      натуральное число из отрезка [a; b] с максимальной суммой делителей.
#      На вход программе подаются два числа, каждое на отдельной строке.
#      Программа должна вывести два числа на одной строке, разделенных пробелом: число с максимальной
#      суммой делителей и сумму его делителей.
#      Если таких чисел несколько, то выведите наибольшее из них.

a = int(input())
b = int(input())
biggest = 0
total = 0
for i in range(a, b + 1):
    counter = 0
    for j in range(1, i + 1):
        if i % j == 0:
            counter += j
        if counter >= total:
            total = counter
            biggest = i
print(biggest, total)

# 150. На вход программе подается натуральное число n. Напишите программу, выводящую
#      графическое изображение делимости чисел от 1 до n включительно. В каждой строке надо напечатать
#      очередное число и столько символов «+», сколько делителей у этого числа.
#      На вход программе подается одно натуральное число.
#      Программа должна вывести графическое изображение чисел от 1 до n, каждое на отдельной строке.

n = int(input())
total = 0
for i in range(1, n + 1):
    counter = 0
    for j in range(1, i + 1):
        if i % j == 0:
            counter += 1
            total = counter
    print(i, total * '+', sep='')

# 151. На вход программе подается натуральное число n. Напишите программу, которая находит цифровой
#      корень данного числа. Цифровой корень числа n получается следующим образом: если сложить все
#      цифры этого числа, затем все цифры найденной суммы и повторить этот процесс, то в результате будет
#      получено однозначное число (цифра), которое и называется цифровым корнем данного числа.
#      На вход программе подается одно натуральное число.
#      Программа должна вывести цифровой корень введенного числа.

n = int(input())
while n > 9:
    total = 0
    while n > 0:
        last = n % 10
        total += last
        n //= 10
    n = total        
print(n)

# 152. Дано натуральное число n. Напишите программу, которая выводит значение суммы 1!+2!+3!+…+n!.
#      На вход программе подается одно натуральное число.
#      Программа должна вывести значение суммы 1!+2!+3!+…+n!.

n = int(input())
counter = 1
total = 0
for i in range(1, n + 1):
    counter *= i
    total += counter
print(total)



# 153. На вход программе подается два натуральных числа a и b (a< b). Напишите программу, которая находит
#      все простые числа от a до b включительно.
#      На вход программе подаются два числа, каждое на отдельной строке.
#      Программа должна вывести все простые числа от a до b включительно, каждое на отдельной строке.
#      Число 11 простым не является.

a = int(input())
b = int(input())
for i in range(a, b + 1):
    count = 0
    for j in range(1, i + 1):
        if i % j == 0:
            count += 1
    if count == 2:
        print(i)

# 154. На обработку поступает натуральное число. Нужно написать программу, которая выводит на экран
#      сумму чётных цифр этого числа или 0, если чётных цифр в записи нет. Программист торопился и написал
#      программу неправильно.
#      Найдите все ошибки в этой программе (их может быть одна или несколько). Известно, что каждая ошибка
#      затрагивает только одну строку и может быть исправлена без изменения других строк.

n = int(input())
s = 0
while n > 0:
    if n % 2 == 0:
        s += n % 10
    n //= 10
print(s)

# 155. На обработку поступает последовательность из 8 целых чисел. Известно, что вводимые числа по
#      абсолютной величине не превышают 10**12. Нужно написать программу, которая выводит на экран
#      количество делящихся нацело на 4 чисел в исходной последовательности и максимальное делящееся
#      нацело на 4 число. Если делящихся нацело на 4 чисел нет, требуется на экран вывести «NO». Программист
#      торопился и написал программу неправильно.
#      Найдите все ошибки в этой программе (их может быть одна или несколько). Известно, что каждая ошибка
#      затрагивает только одну строку и может быть исправлена без изменения других строк.

n = 8
count = 0
maximum = -10 ** 12
for i in range(1, n + 1):
    x = int(input())
    if x % 4 == 0:
        count += 1
        if x > maximum:
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')

# 156. На обработку поступает последовательность из 4 целых чисел. Известно, что вводимые числа по
#      абсолютной величине не превышают 10**8. Нужно написать программу, которая выводит на экран
#      количество нечётных чисел в исходной последовательности и максимальное нечётное число. Если
#      нечётных чисел нет, требуется на экран вывести «NO». Программист торопился и написал программу
#      неправильно.
#      Найдите все ошибки в этой программе (их может быть одна или несколько). Известно, что каждая ошибка
#      затрагивает только одну строку и может быть исправлена без изменения других строк.

n = 4
count = 0
maximum = -10 ** 8
for i in range(1, n + 1):
    x = int(input())
    if x % 2 != 0:
        count += 1
        if x > maximum:
            maximum = x
if count > 0:
    print(count)
    print(maximum)
else:
    print('NO')

# 157. На вход программе подается натуральное число n. Напишите программу, которая печатает звездную
#      рамку размерами n×19.
#      На вход программе подаётся натуральное число n∈[3;19] — высота звездной рамки.
#      Программа должна вывести звездную рамку размерами n×19.

n = int(input())
print('*' * 19)
for i in range(n-2):
    print('*' + ' ' * 17 + '*')
print('*' * 19)

# 158. Дано натуральное число n, (n > 99). Напишите программу, которая определяет его третью (с начала) цифру.
#      На вход программе подается одно натуральное число, состоящее как минимум из трех цифр.
#      Программа должна вывести его третью (с начала) цифру.

n = int(input())
digit = 0
while n > 100:
    last = n % 10
    digit = last
    n //= 10
print(digit)

# 159. Дано натуральное число. Напишите программу, которая вычисляет:
#      •	количество цифр 3 в нем;
#      •	сколько раз в нем встречается последняя цифра;
#      •	количество четных цифр;
#      •	сумму его цифр, больших пяти;
#      •	произведение цифр, больших семи (если цифр больших семи нет, то вывести 1, если такая цифра одна, то вывести ее);
#      •	сколько раз в нем встречается цифры 0 и 5 (всего суммарно).
#      На вход программе подается одно натуральное число.
#      Программа должна вывести значения указанных величин в указанном порядке.

n = int(input())
posled = n % 10
sum_three = 0
sum_last = 0
even = 0
more_five = 0
more_seven = 1
zero_five = 0
while n > 0:
    last = n % 10
    if last == 3:
        sum_three += 1
    if posled == last:
        sum_last += 1
    if last % 2 == 0:
        even += 1
    if last > 5:
        more_five += last
    if last > 7:
        more_seven *= last
    if last == 0 or last == 5:
        zero_five += 1
    n //= 10
print(sum_three)
print(sum_last)
print(even)
print(more_five)
print(more_seven)
print(zero_five)