# Перепишите функцию powers из предыдущего урока так, чтобы она вместо кортежа возвращала список

def powers(num):
    square = num**2 
    cube = num**3
    return [num, square, cube]

# Перед вами имеется практически готовый код, который позволяет определять достиг ли гражданин совершеннолетия или нет. 
# Всю ответственность за проверку взяла на себя функция is_adult, она принимает возраст человека и должна вернуть ответ на вопрос, 
# является ли он совершеннолетним, при условии что совершеннолетие наступает с 18 лет.
# Сейчас тело функции is_adult является пустым и ваша задача его написать.

def is_adult(age):
    return age > 17


a = int(input())
if is_adult(a):
    print('Ух какой большой')
else:
    print('Подрасти еще, сынок')

# Напишите функцию is_leap, которая проверяет является ли переданный год високосным или нет.
# Високосным является год, номер которого делится на 4, но не делится на 100, или же номер которого делится на 400.
# Напишите только определение функции is_leap

def is_leap(year):
    if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
        return True
    return False

# Определите функцию is_palindrome, которая принимает строку и отвечает на вопрос, является ли она палиндромом или нет
# Палиндромами считаются слова, которые читаются одинаково слева направо и справа налево, как например слово «радар»
# При проверке не нужно учитывать регистр букв. Это значит, что слова «радар» и «Радар» считаются одинаковыми.
# Также во входной строке могут встречаться пробелы, их необходимо исключить из проверки. Остальные знаки пунктуации, такие как запятые, точки, дефисы и т.д., во входных данных отсутствуют.

def is_palindrome(s):
    return [j.lower() for i in s.split() for j in i] == [j.lower() for i in s.split()[::-1] for j in i[::-1]]

# Напишите функцию count_leap_years, которая принимает два года y1 и y2, причем y1 <= y2, и возвращает количество високосных лет в промежутке от y1 включительно до  y2 не включительно.
# При реализации функции count_leap_years используйте ранее созданную функцию is_leap.
# Напишите только определения необходимых функций.

def is_leap(year):
    return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0


def count_leap_years(year1, year2):
    return sum([1 for i in range(year1, year2) if is_leap(i)])

# Напишите функцию get_leap_years, которая принимает два года y1 и y2, причем y1 <= y2, и возвращает список, состоящий из високосных лет в промежутке от y1 включительно до  y2 не включительно. 
# Года должны располагаться в нем в хронологическом порядке. При реализации функции get_leap_years используйте ранее созданную функцию is_leap.
# Напишите только определения необходимых функций.

def is_leap(year):
    return (year % 4 == 0 and year % 100 != 0) or year % 400 == 0


def get_leap_years(year1, year2):
    return [i for i in range(year1, year2) if is_leap(i)]

# Определите функцию create_palindrome, которая принимает строку и возвращает результат в зависимости от следующих условий:
# - Если переданная строка уже является палиндромом вне зависимости от регистра букв, вернуть ее, преобразовав все символы к нижнему регистру, иначе идем к следующему пункту
# - Создать палиндром по следующему формату {str}_i_{reverse_str}, где str - переданная строка, а reverse_str ее перевернутое значение. 
# Верните вновь созданный палиндром в качестве ответа, преобразовав все символы к нижнему регистру

def create_palindrome(s):
    s = s.replace(' ', '').lower()
    if s == s[::-1]:
        return s
    return f'{s}_i_{s[::-1]}'

# Напишите функцию is_strings_equal, которая принимает две строки в качестве аргументов и сравнивает их между собой. 
# Строки считаются равными, если они имеют одинаковую длину и одинаковые символы в равном количестве вне зависимости от их расположения.
# Функция is_strings_equal должна вернуть True, если строки равны, в противном случае - False.

def is_strings_equal(s1, s2):
    return sorted(s1) == sorted(s2)