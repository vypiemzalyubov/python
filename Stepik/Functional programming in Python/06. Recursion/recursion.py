# Перепишите рекурсивную функцию speller так, чтобы она выводила буквы слова в обратном порядке (каждую букву на новой строке)

def speller(word):
    if len(word) > 0:
        speller(word[1:])
        print(word[0])

# Определите функцию print_from, которая принимает одно натуральное число n и распечатывает на экране убывающую последовательность целых чисел от n до 1 включительно.
# Каждое число необходимо выводить на отдельной строке. Ваша задача только написать определение функции print_from

def print_from(n):
    if n < 1:
        return
    print(n)
    print_from(n - 1)

# Определите функцию print_to, которая принимает одно натуральное число n и распечатывает на экране последовательность целых чисел от 1 до n включительно.
# Каждое число необходимо выводить на отдельной строке. Ваша задача только написать определение функции print_to

def print_to(n):
    if n > 0:
        print_to(n - 1)
        print(n)

# Напишите рекурсивную функцию summa, которая будет суммировать все числа от 1 до N. Число N поступает внутрь функции в качестве аргумента

def summa(n):
    if n == 0:
        return 0
    return n + summa(n - 1)

# Напишите рекурсивную функцию find_min, которая найдет наименьшее число в списке.
# Для этого функция принимает в качестве аргумента список для поиска наименьшего значения

def find_min(lst):
    if len(lst) == 0:
        return
    elif len(lst) == 1:
        return lst[0]
    return lst[0] if lst[0] < find_min(lst[1:]) else find_min(lst[1:])

# Напишите функцию sum_recursive, которая принимает на вход одномерный список из целых чисел и возвращает сумму элементов переданного списка.
# Не забывайте, что реализовать это нужно при помощи рекурсии. Ваша задача только написать определение функции sum_recursive

def sum_recursive(lst):
    if len(lst) == 0:
        return
    elif len(lst) == 1:
        return lst[0]
    return lst[0] + sum_recursive(lst[1:])

# Напишите функцию sum_digits, которая находит сумму всех цифр переданного натурального числа n.
# Ваша задача только написать определение функции sum_digits

def sum_digits(n):
    if n <= 0:
        return n
    return n % 10 + sum_digits(n // 10)

# Необходимо написать рекурсивную функцию double_fact, которая принимает на вход целое число и вычисляет значение двойного факториала по формуле.
# Ваша задача только написать определение функции double_fact

def double_fact(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    return n * double_fact(n - 2)

# Последовательностью Фибоначчи называется последовательность чисел a0, a1, ..., an, ..., где число, стоящее на n-ой позиции можно вычислить по формуле.
# Требуется найти N-е число Фибоначчи при помощи рекурсивной функции fibonacci. Функция должна принимать порядковый номер N и возвращать N-ое число Фибоначчи.
# Ваша задача только написать определение функции fibonacci

def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)

# Ваша задача - написать рекурсивную функцию tribonacci, которая принимает на вход целое число n - порядковый номер чисел Трибоначчи.
# Функция по параметру n должна вычислить и вернуть значение, стоящее на n-м месте в ряде чисел Трибоначчи.
# Ваша задача только написать определение функции tribonacci

def tribonacci(n):
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3)

# Ваша задача - написать рекурсивную функцию get_combin, которая принимает на вход два целых числа
# и находит C(N,K) — число сочетаний из N элементов по K — с помощью рекуррентного соотношения.
# При этом гарантируется, что входные значения n и k будут удовлетворять следующим условиям:
# - n>0
# - 0<=k<=n
# Ваша задача только написать определение функции get_combin.
# В тестовых примерах в функцию get_combin сперва передается значение параметра n, затем k.

def get_combin(n, k):
    if k == n or k == 0:
        return 1
    elif 0 < k < n:
        return get_combin(n - 1, k) + get_combin(n - 1, k - 1)
    
# Ваша задача - написать рекурсивную функцию ackermann, которая принимает на вход два целых числа  m и n, и находит значение, определенное следующим образом.
# Найденное значение функция ackermann должна вернуть в качестве результата. Ваша задача только написать определение функции ackermann.
# В тестовых примерах в функцию сперва передается значение параметра m, затем n.

def ackermann(m, n):
    if m == 0:
        return n + 1
    elif m > 0 and n == 0:
        return ackermann(m - 1, 1)
    elif m > 0 and n > 0:
        return ackermann(m - 1, ackermann(m, n - 1))