# Ниже имеется готовая функция add_binary, которая принимает два числа и возвращает их сумму в двоичной системе счисления
# Ваша задача только добавить докстроку «Возвращает сумму чисел a и b в двоичном виде»

def add_binary(a, b):
    """Возвращает сумму чисел a и b в двоичном виде"""
    binary_sum = bin(a+b)[2:]
    return binary_sum

# Помните задачу «Проверка на високосность» ?
# Ниже представлен код реализации данной функции, ваша задача добавить аннотации к ней

def is_leap(year: int) -> bool:
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)

# Теперь ваша задача добавить аннотации к готовому коду задачи «Аффирмации Барта Симпсона»

def repeat_phrase_n_times(phrase: str, n: int) -> None:
    for i in range(n):
        print(phrase)

# Напишите функцию get_first_repeated_word, которая имеет один параметр words - список, состоящий из нескольких слов.
# Функция должна найти первый элемент, который образует дубль с ранее стоящими элементами, и вернуть его в качестве результата.
# Если передан список, в котором все слова различны, функция get_first_repeated_word должна вернуть None
# Регистр букв при сравнении нужно учитывать
# Для функции  get_first_repeated_word  дополнительно нужно добавить
#  1️⃣  док-строку  Находит первый дубль в списке
#  2️⃣  аннотации при помощи модуля typing

from typing import List, Optional


def get_first_repeated_word(words: List[str]) -> Optional[str]:
    """Находит первый дубль в списке"""
    dct = dict()
    for word in words:
        dct[word] = dct.get(word, 0) + 1
        if dct[word] > 1:
            return word
    return

# Напишите функцию rotate, которая имеет следующие параметры
#     ✔️  lst - список чисел (целых или вещественных)
#     ✔️  shift - целое число, обозначающее сдвиг. По умолчанию равен 1
# Функция rotate должна выполнить циклический сдвиг элементов списка на shift позиций и вернуть в качестве ответа новый список со смещенными значениями.
# Если значение shift положительно, сдвиг необходимо производить вправо, если отрицательно — влево.
# Дополнительные условия для задания:
#     1️⃣ Функция rotate  должна быть чистой
#     2️⃣ необходимо проаннотировать параметры функции rotate  и ее возврат без использования модуля typing. Для тестов важен порядок следования типов
#     3️⃣ добавьте док-строку с содержанием «Функция выполняет циклический сдвиг списка на shift позиций вправо(shift>0) или влево(shift<0)»

def rotate(lst: list[int | float], shift: int = 1) -> list[int | float]:
    """Функция выполняет циклический сдвиг списка на shift позиций вправо(shift>0) или влево(shift<0)"""
    return lst[-shift % len(lst):] + lst[:-shift % len(lst)]

# Перепишите функцию rotate так, чтобы она стала работать не со списками, а с кортежами. Для этого выполните следующие шаги:
#     1️⃣ переименовать параметр lst - в tpl. Теперь функция будет принимать не список, а кортеж целых или вещественных чисел
#     2️⃣ изменится тип возвращаемого значения. Вместо списка функция rotate теперь должна возвращать кортеж. Остальная логика программы не меняется
#     3️⃣ док строку изменить на «Функция выполняет циклический сдвиг кортежа на shift позиций вправо (shift>0) или влево (shift<0)»

def rotate(tpl: tuple[int | float, ...], shift: int = 1) -> tuple[int | float, ...]:
    """Функция выполняет циклический сдвиг кортежа на shift позиций вправо (shift>0) или влево (shift<0)"""
    return tpl[-shift % len(tpl):] + tpl[:-shift % len(tpl)]

# Напишите функцию rotate_letter, которая принимает два аргумента:
# letter - одна английская буква в нижнем регистре
# shift целое число - значение сдвига буквы (может быть как положительным, так и отрицательным)
# Функция rotate_letter по переданному значению сдвига shift находит новую букву относительно текущей позиции буквы letter в алфавите.
# Сдвиг может быть цикличным в пределах от a до z как в вправо (при положительном значении shift), так и влево (при отрицательном значении shift).
# Ниже представлены примеры работы функции rotate_letter:
# rotate_letter('b', 2)=> 'd'
# rotate_letter('d', 1) => 'e'
# rotate_letter('z', 1) => 'a'
# rotate_letter('d', -2) => 'b'
# rotate_letter('d', 26) => 'd'
# rotate_letter('b', -3) => 'y'
# Требования к функции rotate_letter:
#      ✔️ должна вернуть новый символ;
#      ✔️ параметры и возвращаемое значение должны быть проаннотированы;
#      ✔️ добавьте doc-строку «Функция сдвигает символ letter на shift позиций».
# Для решения вам поможет таблица ascii кодов английских букв. В ней обратите внимание только на символы в нижнем регистре.
# Для преобразования символа в код ascii и наоборот вам потребуются функции ord и chr

def rotate_letter(letter: str, shift: int) -> str:
    """Функция сдвигает символ letter на shift позиций"""
    return chr((ord(letter) - 97 + shift) % 26 + 97)

# На основании функции rotate_letter из предыдущего задания мы с вами можем реализовать знаменитый шифр Цезаря.
# Этот шифр берет каждую букву исходной фразы и смещает ее на значение ключа. Под ключом здесь подразумевается значение сдвига shift.
# В пределах кодирования одной фразы значение сдвига всегда постоянно.
# И так, ваша задача создать функцию caesar_cipher, которая имеет два обязательных параметра:
#      1️⃣ phrase входной текст для шифрования
#      2️⃣ key значение ключа шифра, он же сдвиг.
# Внутри функции caesar_cipher  необходимо последовательно пройтись по каждому символу и преобразовать его по следующим правилам:
# - если символ является знаком пунктуации, оставляем его как есть
# - если это буква, то сместить ее при помощи ранее написанной функции rotate_letter  на значение ключа
# Закодированный текст необходимо вернуть в качестве ответа. Вот пример работы
# caesar_cipher('leave out all the rest', -1) => 'kdzud nts zkk sgd qdrs'
# caesar_cipher('one more light', 3) => 'rqh pruh oljkw'
# Для успешного решения напишите реализацию функции caesar_cipher, которая использует функцию rotate_letter.
# (нужно продублировать определение функции rotate_letter из предыдущего урока).
# Дополнительно нужно :
#      ✔️  сделать аннотацию параметров и возвращаемого значения всех функций
#      ✔️  сделать док-строку для функции caesar_cipher со значением «Шифр Цезаря»

def rotate_letter(letter: str, shift: int) -> str:
    """Функция сдвигает символ letter на shift позиций"""
    return chr((ord(letter) - 97 + shift) % 26 + 97)


def caesar_cipher(phrase: str, key: int) -> str:
    """Шифр Цезаря"""
    return ''.join([rotate_letter(i, key) if i.isalpha() else i for i in phrase])
