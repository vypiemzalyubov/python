# Перепишите код ниже так, чтобы напротив результата вызова функции выводилось значение, хранящееся по ключу

def red():
    return 'Color is red'

def green():
    return 'Color is green'

def blue():
    return 'Color is blue'

colors = {}
colors[green] = '00FF00'
colors[blue] = '0000FF'
colors[red] = 'FF0000'

for i, j in colors.items():
    print(f'{i()} - {j}')

# Представь, что ты работаешь в компании, которая занимается разработкой программного обеспечения.
# Твой начальник дал тебе задание написать программу, которая будет вычислять факториал числа.
# Факториал числа - это произведение всех натуральных чисел от 1 до этого числа. Например, факториал числа 5 равен 1 * 2 * 3 * 4 * 5 = 120.
# Однако, есть одно условие: ты должен сохранить результат вычисления факториала в глобальной переменной, чтобы его можно было использовать в других частях программы.
# Это означает, что значение факториала будет доступно для использования в других функциях или блоках кода.
# Также, твой начальник хочет, чтобы программа была оптимизирована и не вычисляла факториал числа каждый раз заново.
# Вместо этого, программа должна проверять, вызывалась ли уже функция с таким параметром.
# Если функция уже вызывалась с таким параметром, то программа должна вернуть сохраненное значение, а не вычислять его заново.
# Также перед возвратом такого значения функция должна вывести на экран «Get from cache value factorial(n)»
# Таким образом, твоя задача - написать функцию factorial, которая будет вычислять факториал числа, сохранять результат в глобальной переменной и проверять,
# вызывалась ли уже функция с таким параметром.

fact = 1
cache = dict()


def factorial(n):
    if cache.get(n) is not None:
        print(f'Get from cache value factorial({n})')
        return cache.get(n)
    global fact
    res = 1
    for i in range(1, n + 1):
        res *= i
    cache[n] = res
    fact = res
    return res

# Одной из базовых банковских услуг является обмен валют.
# Напишите функцию convert, которая умеет конвертировать доллар в другую валюту и наоборот.
# Для конвертации используются текущие курсы валют, которые хранятся в глобальном словаре exchange_rates.
# Результат округлите до двух знаков после запятой при помощи функции round

exchange_rates = {
    "USD": 1.0,
    "EUR": 0.861775,
    "GBP": 0.726763,
    "INR": 75.054725,
    "AUD": 1.333679,
    "CAD": 1.237816,
    "SGD": 1.346851,
}


def convert(currency1: str, currency2: str, count: int):
    return round(exchange_rates[currency2] / exchange_rates[currency1] * count, 2)

# Начальник дал джуну Ване реализовать анонимную функцию, которая принимает два числа, возводит каждое в квадрат и складывает полученные результаты.
# Сохранить функцию необходимо было в переменную square Но Ваня очень разволновался и допустил несколько ошибок.
# Вам, как опытному коллеге, необходимо исправить ошибки Вани, чтобы начальник не лишил его зарплаты.  Исправления нужно сделать только в пределах одной строки.
# Вводить и выводить ничего не нужно

square = lambda x, y: x**2 + y**2

# В переменную adding_10 присвойте lambda функцию, которая принимает одно число и увеличивает его на 10.
# Ничего кроме создания переменной adding_10 делать не нужно

adding_10 = lambda x: x + 10

# В переменную starts_with присвойте lambda функцию, которая принимает строку и возвращает True, когда переданная строка начинается с буквы «W».
# Во всех остальных случаях нужно возвращать False. Ничего кроме создания переменной starts_with делать не нужно

starts_with = lambda s: s.startswith('W')

# В переменную check_word присвойте lambda функцию, которая принимает строку и возвращает True,
# если переданная строка начинается с букв «Q» или «R» и заканчивается любой из гласных «A», «E», «I», «U» или «O».
# Регистр во время проверок не должен иметь значения.
# Во всех остальных случаях нужно возвращать False. Ничего кроме создания переменной check_word делать не нужно

check_word = lambda s: s.lower().startswith(('q', 'r')) and s.lower().endswith(('a', 'e', 'i', 'u', 'o'))

# Помните задачу «Проверка на високосность»? Ваша задача реализовать данную функцию при помощи lambda оператора
# Полученную функцию сохраните в переменную is_leap

is_leap = lambda year: (year % 4 == 0 and year % 100 != 0) or year % 400 == 0

# Имеется функция sale, которая возвращает цену товара со скидкой 10%.
# def sale(x):
#     return x*0.9
# Однако мы изучаем анонимные функции, поэтому на основе данной функции создайте анонимную функцию и присвойте её переменной sale_lambda

sale_lambda = lambda n: n * 0.9

# Хорошо постарались с прошлой задачей! Однако мы забыли, что скидка должна быть только для тех товаров, стоимость которых больше 50.
# Вам стоит внести это изменение в прошлый код. Ваша задача только переопределить переменную sale_lambda

sale_lambda = lambda n: n * 0.9 if n > 50 else n

# Напишите lambda функцию, которая принимает произвольное количество числовых аргументов и выводит их среднее арифметическое.
# Для проверки решения присвойте вашу lambda функцию переменной average.
# Вводить и выводить ничего не нужно, только определить переменную average

average = lambda *args: sum(args) / len(args)