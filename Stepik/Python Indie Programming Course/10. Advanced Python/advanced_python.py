# 454. Ниже представлен код, который вам нужно будет дописать.
#      В переменную from_10_to_20 при помощи генератора-выражения сохраните последовательность от 10 до 20 включительно.
#      Затем при помощи функции next выведите первые три элемента. И остается вывести оставшиеся элементы в цикле.

from_10_to_20 = (i for i in range(10, 21))

print(next(from_10_to_20))
print(next(from_10_to_20))
print(next(from_10_to_20))

for value in from_10_to_20:
    print(value)

# 455. Перед вами список words. Необходимо сохранить в переменной lens генератор-выражение, который генерирует длины слов списка words по порядку.
#      Больше от вас в этой задаче ничего не требуется.

words = ['feel', 'graduate', 'movie', 'fashionable', 'bacon', 'drop', 'produce', 'acquisition',
         'cheap', 'strength', 'master', 'perception', 'noise', 'strange', 'am']

lens = (len(word) for word in words)

for i in lens:
    print(i)

# 456. Давайте напишем выражение-генератор, который будет генерировать кортеж состоящий из двух элементов: названия дня недели и номер дня в году.
#      За начало отсчета возьмем наш «любимый» 2022 год. Он начался в субботу, потом воскресенье, понедельник, вторник, ..., пятница, суббота и далее по кругу.
#      Результат выражения-генератор сохраните в переменную days.
#      Названия дней недели должны совпадать с этими значениями: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].
#      Значит при первой итерации генератор должен вернуть кортеж:
#      (1, 'Saturday')
#      При второй итерации вернется значение:
#      (2, 'Sunday')
#      Ваша задача распечатать на удачу 77 первых дней 2022 года. Выводить на экран нужно сами кортежи и первые десять значений в выводе должны выглядеть вот так:
#      (1, 'Saturday')
#      (2, 'Sunday')
#      (3, 'Monday')
#      (4, 'Tuesday')
#      (5, 'Wednesday')
#      (6, 'Thursday')
#      (7, 'Friday')
#      (8, 'Saturday')
#      (9, 'Sunday')
#      (10, 'Monday')

day = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
days = ((i + 1, day[(5 + i) % 7]) for i in range(77))
for _ in range(77):
    print(next(days))

# 457. Ваша задача создать функцию-генератор gen_squares, которая принимает аргумент n и генерирует квадраты чисел от 1 до n включительно. Ниже несколько вариантов использования:
#      for i in gen_squares(5):
#           print(i)
#      # Будет напечатано
#      # 1
#      # 4
#      # 9
#      # 16
#      # 25
#      Ваша задача написать только определение функции gen_squares.

def gen_squares(n: int):
    for i in range(1, n + 1):
        yield i ** 2

# 458. Ваша задача создать функцию-генератор gen_fibonacci_numbers, которая принимает аргумент n и генерирует n-ое количество чисел Фибоначчи.
#      Будем считать, что последовательность Фибоначчи такая: 1, 1, 2, 3, 5, 8, 13, 21, 34, ...
#      Ниже несколько вариантов использования:
#      for i in gen_fibonacci_numbers(5):
#            print(i)
#      # Будет напечатано
#      # 1
#      # 1
#      # 2
#      # 3
#      # 5
#      Ваша задача написать только определение функции gen_fibonacci_numbers.

def gen_fibonacci_numbers(n: int):
    a = b = 1
    for _ in range(n):
        yield a
        a, b = b, a + b

# 459. Ваша задача создать функцию-генератор my_range_gen, которая копирует работу range. 
#      1. my_range_gen можно запускать, передав ей один параметр stop:
#         my_range_gen(stop)
#         и она должна генерировать последовательность от 0 до stop не включительно:
#         for i in my_range_gen(5):
#               print(i)
#         # Будет напечатано
#         # 0
#         # 1
#         # 2
#         # 3
#         # 4
#      2. my_range_gen можно запускать, передав ей два параметра start и stop:
#         my_range_gen(start, stop)
#         и она должна генерировать последовательность от start включительно до stop не включительно:
#         for i in my_range_gen(4, 8):
#               print(i)
#         # Будет напечатано
#         # 4
#         # 5
#         # 6
#         # 7
#      3. my_range_gen можно запускать, передав ей три параметра start, stop и step:
#         my_range_gen(start, stop, step)
#         и она должна генерировать последовательность от start включительно до stop не включительно c шагом step:
#         for i in my_range_gen(4, 8, 2):
#               print(i)
#         # Будет напечатано
#         # 4
#         # 6
#      4. предусмотрите вариант запуска my_range_gen со значением step=0. При таком варианте вызова, функция не должна генерировать ни одной последовательности и закончить свою работу. 
#         Такое же поведение должно быть если переданы нелогичные значения start, stop и step (см. примеры):
#         for i in my_range_gen(4, 8, 0):
#               print(i)
#         # Ничего не печатает
#         for i in my_range_gen(20, 10, 3):
#               print(i)
#         # Ничего не печатает, потому что нельзя пройти от 20 до 10 с шагом 3
#         Ваша задача написать только определение функции my_range_gen. И да, функцией range пользоваться нельзя, можете конечно попробовать, но у вас ничего не получится. 

def my_range_gen(*args):
    if len(args) == 1:
        start = args[0]
        count = 0
        while count < start:
            yield count
            count += 1
    elif len(args) == 2:
        start, stop = args[0], args[1]
        while start < stop:
            yield start
            start += 1
    else:
        start, stop, step = args[0], args[1], args[2]
        if start < stop and step > 0:
            while start < stop:
                yield start
                start += (step)
        elif start > stop and step < 0:
             while start > stop:
                yield start
                start += (step)

# 460. Перед вами имеется список numbers, состоящий из целых чисел. Ваша задача преобразовать каждый элемент списка numbers в строку и сохранить полученный результат в новый список strings. 
#      Для преобразования используйте map. В качестве ответа выведите переменную strings.

numbers = [116, -411, 448, 636, -254, -295, 220, 216, 187, -150, -458, -372, 450, 141, -626, -168, -383, 389, -184, 609, 221, 311, 526, 254, -631, 
           -174, -555, -338, 226, 695, -16, 333, 12, -600, -258, -383, -101, 121, 40, 278, 118, -462, -671, 78, -69, -568, -228, -445, -47, -565]
print(strings := list(map(str, numbers)))