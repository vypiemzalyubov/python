# 454. Ниже представлен код, который вам нужно будет дописать.
#      В переменную from_10_to_20 при помощи генератора-выражения сохраните последовательность от 10 до 20 включительно.
#      Затем при помощи функции next выведите первые три элемента. И остается вывести оставшиеся элементы в цикле.

from_10_to_20 = (i for i in range(10, 21))

print(next(from_10_to_20))
print(next(from_10_to_20))
print(next(from_10_to_20))

for value in from_10_to_20:
    print(value)

# 455. Перед вами список words. Необходимо сохранить в переменной lens генератор-выражение, который генерирует длины слов списка words по порядку.
#      Больше от вас в этой задаче ничего не требуется.

words = ['feel', 'graduate', 'movie', 'fashionable', 'bacon', 'drop', 'produce', 'acquisition',
         'cheap', 'strength', 'master', 'perception', 'noise', 'strange', 'am']

lens = (len(word) for word in words)

for i in lens:
    print(i)

# 456. Давайте напишем выражение-генератор, который будет генерировать кортеж состоящий из двух элементов: названия дня недели и номер дня в году.
#      За начало отсчета возьмем наш «любимый» 2022 год. Он начался в субботу, потом воскресенье, понедельник, вторник, ..., пятница, суббота и далее по кругу.
#      Результат выражения-генератор сохраните в переменную days.
#      Названия дней недели должны совпадать с этими значениями: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].
#      Значит при первой итерации генератор должен вернуть кортеж:
#      (1, 'Saturday')
#      При второй итерации вернется значение:
#      (2, 'Sunday')
#      Ваша задача распечатать на удачу 77 первых дней 2022 года. Выводить на экран нужно сами кортежи и первые десять значений в выводе должны выглядеть вот так:
#      (1, 'Saturday')
#      (2, 'Sunday')
#      (3, 'Monday')
#      (4, 'Tuesday')
#      (5, 'Wednesday')
#      (6, 'Thursday')
#      (7, 'Friday')
#      (8, 'Saturday')
#      (9, 'Sunday')
#      (10, 'Monday')

day = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
days = ((i + 1, day[(5 + i) % 7]) for i in range(77))
for _ in range(77):
    print(next(days))

# 457. Ваша задача создать функцию-генератор gen_squares, которая принимает аргумент n и генерирует квадраты чисел от 1 до n включительно. Ниже несколько вариантов использования:
#      for i in gen_squares(5):
#           print(i)
#      # Будет напечатано
#      # 1
#      # 4
#      # 9
#      # 16
#      # 25
#      Ваша задача написать только определение функции gen_squares.

def gen_squares(n: int):
    for i in range(1, n + 1):
        yield i ** 2

# 458. Ваша задача создать функцию-генератор gen_fibonacci_numbers, которая принимает аргумент n и генерирует n-ое количество чисел Фибоначчи.
#      Будем считать, что последовательность Фибоначчи такая: 1, 1, 2, 3, 5, 8, 13, 21, 34, ...
#      Ниже несколько вариантов использования:
#      for i in gen_fibonacci_numbers(5):
#            print(i)
#      # Будет напечатано
#      # 1
#      # 1
#      # 2
#      # 3
#      # 5
#      Ваша задача написать только определение функции gen_fibonacci_numbers.

def gen_fibonacci_numbers(n: int):
    a = b = 1
    for _ in range(n):
        yield a
        a, b = b, a + b

# 459. Ваша задача создать функцию-генератор my_range_gen, которая копирует работу range. 
#      1. my_range_gen можно запускать, передав ей один параметр stop:
#         my_range_gen(stop)
#         и она должна генерировать последовательность от 0 до stop не включительно:
#         for i in my_range_gen(5):
#               print(i)
#         # Будет напечатано
#         # 0
#         # 1
#         # 2
#         # 3
#         # 4
#      2. my_range_gen можно запускать, передав ей два параметра start и stop:
#         my_range_gen(start, stop)
#         и она должна генерировать последовательность от start включительно до stop не включительно:
#         for i in my_range_gen(4, 8):
#               print(i)
#         # Будет напечатано
#         # 4
#         # 5
#         # 6
#         # 7
#      3. my_range_gen можно запускать, передав ей три параметра start, stop и step:
#         my_range_gen(start, stop, step)
#         и она должна генерировать последовательность от start включительно до stop не включительно c шагом step:
#         for i in my_range_gen(4, 8, 2):
#               print(i)
#         # Будет напечатано
#         # 4
#         # 6
#      4. предусмотрите вариант запуска my_range_gen со значением step=0. При таком варианте вызова, функция не должна генерировать ни одной последовательности и закончить свою работу. 
#         Такое же поведение должно быть если переданы нелогичные значения start, stop и step (см. примеры):
#         for i in my_range_gen(4, 8, 0):
#               print(i)
#         # Ничего не печатает
#         for i in my_range_gen(20, 10, 3):
#               print(i)
#         # Ничего не печатает, потому что нельзя пройти от 20 до 10 с шагом 3
#         Ваша задача написать только определение функции my_range_gen. И да, функцией range пользоваться нельзя, можете конечно попробовать, но у вас ничего не получится. 

def my_range_gen(*args):
    if len(args) == 1:
        start = args[0]
        count = 0
        while count < start:
            yield count
            count += 1
    elif len(args) == 2:
        start, stop = args[0], args[1]
        while start < stop:
            yield start
            start += 1
    else:
        start, stop, step = args[0], args[1], args[2]
        if start < stop and step > 0:
            while start < stop:
                yield start
                start += (step)
        elif start > stop and step < 0:
             while start > stop:
                yield start
                start += (step)

# 460. Перед вами имеется список numbers, состоящий из целых чисел. Ваша задача преобразовать каждый элемент списка numbers в строку и сохранить полученный результат в новый список strings. 
#      Для преобразования используйте map. В качестве ответа выведите переменную strings.

numbers = [116, -411, 448, 636, -254, -295, 220, 216, 187, -150, -458, -372, 450, 141, -626, -168, -383, 389, -184, 609, 221, 311, 526, 254, -631, 
           -174, -555, -338, 226, 695, -16, 333, 12, -600, -258, -383, -101, 121, 40, 278, 118, -462, -671, 78, -69, -568, -228, -445, -47, -565]
print(strings := list(map(str, numbers)))

# 461. Перед вами имеется список numbers, состоящий из целых чисел. Ваша задача увеличить каждый элемент списка numbers втрое и сохранить полученный результат в новый список increase_3. 
#      Для преобразования используйте функцию map. В качестве ответа выведите переменную increase_3.

numbers = [116, -411, 448, 636, -254, -295, 220, 216, 187, -150, -458, -372, 450, 141, -626, -168, -383, 389, -184, 609, 221, 311, 526, 254, -631, 
           -174, -555, -338, 226, 695, -16, 333, 12, -600, -258, -383, -101, 121, 40, 278, 118, -462, -671, 78, -69, -568, -228, -445, -47, -565]
print(increase_3 := [*map(lambda x: x * 3, numbers)])

# 462. Напишите программу, которая возводит в квадрат и в куб каждое число из списка numbers пользуясь при этом функциями map и lambda.
#      В результате у вас должно получится два отдельных списка: в одном квадраты, в другом кубы. Их необходимо вывести на экран.

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print([*map(lambda x: x ** 2, numbers)], [*map(lambda x: x ** 3, numbers)], sep='\n')

# 463. Помните задачку про RGB? Сейчас вам предстоит выполнить обратное преобразование. Ваша задача создать функцию from_hex_to_rgb, которая принимает на вход строку
#      - закодированный код цвета в формате RGB и возвращает кортеж из трех значений (оттенок_красного, оттенок_зеленого, оттенок_синего). 
#      Вот посмотрите примеры:
#      from_hex_to_rgb(#000000) => (0, 0, 0)
#      from_hex_to_rgb(#FFFFFF) => (255, 255, 255)
#      from_hex_to_rgb(#FF0000) => (255,0, 0)
#      from_hex_to_rgb(#00FF00) => (0,255, 0)
#      from_hex_to_rgb(#0000FF) => (0,0,255)
#      from_hex_to_rgb(#FFFFFF) => (255,255,255)
#      from_hex_to_rgb(#87CEEB) => (135,206,235)
#      from_hex_to_rgb(#87CEFA) => (135,206,250)
#      from_hex_to_rgb(#191970) => (25,25,112)
#      Как только функция будет готова, ее необходимо применить ко всем элементам списка colors при помощи функции map. 
#      Ниже уже имеется готовый список colors и цикл обхода результата функции map. Добавьте только название функции внутри вызова map, все остальное код сделает за вас.

def from_hex_to_rgb(color: str) -> tuple:
    color = color[1:3], color[3:5], color[5:7]
    return tuple(map(lambda x: int(x, 16), color))

colors = ['#B22222', '#DC143C', '#FF0000', '#FF6347', '#FF7F50', '#CD5C5C', '#F08080', '#E9967A',
          '#FA8072', '#FFA07A', '#FF4500', '#FF8C00', '#FFA500', '#FFD700', '#B8860B', '#DAA520',
          '#EEE8AA', '#BDB76B', '#F0E68C', '#808000', '#FFFF00', '#9ACD32', '#556B2F', '#6B8E23',
          '#7CFC00', '#7FFF00', '#ADFF2F']

for red, green, blue in map(from_hex_to_rgb, colors):
    print(f"Red={red}, Green={green}, Blue={blue}")

# 464. На вход вашей программе поступают английские буквы через пробел в верхнем или маленьком регистре.
#      Ваша задача сформировать список кортежей. Каждый элемент кортежа будет состоять из двух значений: берется соответствующая буква сперва в верхнем регистре, а затем в нижнем (см. примеры ниже)
#      Выведите на экран полученный список кортежей.

print([*map(lambda x: (x.upper(), x.lower()), input().split())])

# 465. Перед вами имеется список кортежей names. Каждый кортеж состоит из двух элементов: имени и фамилии. 
#      Ваша задача на основании списка names создать новый список new_names, где каждый кортеж должен замениться на строку конкатенации имени и фамилии, между которыми стоит пробел. 
#      Вот пример на других данных:
#      names = [('Monica', 'Waters'), ('Juan', 'Lee'), ('Donna', 'Walker')]
#      new_names = ['Monica Waters', 'Juan Lee', 'Donna Walker']
#      Для преобразования используйте функцию map. В качестве ответа выведите переменную new_names.

names = [('Gerald', 'Tucker'), ('Tricia', 'Johnson'), ('Robert', 'Mendez'),
         ('Shawn', 'Gutierrez'), ('Gary', 'Ross'), ('Melanie', 'Warren'),
         ('Drew', 'May'), ('Jennifer', 'Carroll'), ('Ann', 'Lynn'), ('Ralph', 'Vazquez'),
         ('Brittany', 'Erickson'), ('Mark', 'Montoya'), ('Randall', 'Hicks'),
         ('Tyler', 'Miller'), ('Bryan', 'Brown'), ('Joshua', 'Sawyer'),
         ('Sarah', 'Phillips'), ('Donna', 'Davenport'), ('Rebekah', 'Johnson'),
         ('Andrew', 'Reynolds'), ('April', 'Turner'), ('Amanda', 'Ryan'), ('Jennifer', 'Poole'),
         ('Jonathan', 'Lane'), ('Laura', 'Stone'), ('Sara', 'Brown'), ('Alexander', 'Johnson'),
         ('Emily', 'Phillips'), ('Tyler', 'Smith'), ('Victor', 'Kelly'), ('Audrey', 'Thomas'),
         ('Melissa', 'Green'), ('Bethany', 'Holt'), ('Christopher', 'Kerr'), ('Gabrielle', 'Black'),
         ('Jennifer', 'Wade'), ('Douglas', 'Horton'), ('Steven', 'Welch'),
         ('Terri', 'Thompson'), ('Cassandra', 'Nelson'), ('Andrew', 'Jones'),
         ('James', 'Schultz'), ('Richard', 'Castillo'), ('Shaun', 'Logan'),
         ('Danielle', 'Lane'), ('Mark', 'Anderson'), ('Charles', 'Shaw'),
         ('Derrick', 'Grant'), ('Tracy', 'Pierce'), ('Robert', 'Washington')]
print(new_names := [*map(lambda x: f'{x[0]} {x[1]}', names)])

# 466. Перед вами имеется список словарь persons. Изучите внимательно все элементы списка, у них имеется одинаковый набор ключей. 
#      Ваша задача на основании списка persons отобрать информацию о номерах телефона и сложить их в отдельный список phones. 
#      Номера в списке phones должны располагаться в том же порядке, в котором расположены их владельцы в списке persons.
#      В качестве ответа выведите переменную phones. Используйте функцию map.

persons = [
    {
        'birthday': '1983-10-25',
        'job': 'Field seismologist',
        'name': 'Andrew Hernandez',
        'phone': '680-436-8521x3468'
    },
    {
        'birthday': '1993-10-03',
        'job': 'Pathologist',
        'name': 'Paul Harmon',
        'phone': '602.518.4130'
    },
    {
        'birthday': '2002-06-11',
        'job': 'Designer, multimedia',
        'name': 'Gregory Flores',
        'phone': '691-498-5303x079'
    },
    {
        'birthday': '2006-11-28',
        'job': 'Print production planner',
        'name': 'Jodi Garcia',
        'phone': '(471)195-7189'},
    {
        'birthday': '2019-12-05',
        'job': 'Warehouse manager',
        'name': 'Elizabeth Cannon',
        'phone': '001-098-434-5950x276'
    },
    {
        'birthday': '1984-06-12',
        'job': 'Visual merchandiser',
        'name': 'Troy Lucas',
        'phone': '+1-018-070-2288x18433'
    },
    {
        'birthday': '1993-09-14',
        'job': 'International aid/development worker',
        'name': 'Laurie Sandoval',
        'phone': '2930693269'
    },
    {
        'birthday': '1999-05-25',
        'job': 'Editor, film/video',
        'name': 'Jack Clark',
        'phone': '8643048473'
    },
    {
        'birthday': '1985-09-11',
        'job': 'Magazine journalist',
        'name': 'Kimberly Johnson',
        'phone': '+1-583-428-7663'
    },
    {
        'birthday': '1990-10-07',
        'job': 'Museum/gallery curator',
        'name': 'Austin Liu PhD',
        'phone': '714-879-5250'
    }
]
print(phones := [*map(lambda x: x['phone'], persons)])

# 467. Имеется три списка из 50 элементов: list_x, list_y и list_w. Ваша задача произвести научные расчеты для соответствующий значений этих списков. 
#      Нужно подставить в формулу: x ** 2 - x * y * w - w ** 4. 
#      Поочередно первые значения из списков list_x, list_y и list_w, потом вторые, затем третьи и т.д.  Значения из списка list_x должны подставляться в переменную x, 
#      из списка list_y - в переменную y и из списка list_w - в переменную w. Всего должно получиться 50 вычисленных значений. Их необходимо сложить в список и вывести на экран.

list_x = [25, 48, 23, 13, -18, -10, -3, 16, 2, -12, 20, -14, 14, 45, 41, 6, 11, 15, 22,
          -14, -11, 41, 15, 48, 47, 41, -8, 1, 4, 1, 40, 27, -11, -2, -14, -15, 35, 4,
          49, 4, 5, 13, 50, 35, -3, 3, 30, -11, 7, 12]

list_y = [-9, 17, 41, 47, -5, -10, -5, 13, 31, -11, 37, 9, 46, 27, -1, 36, 32, 23, -12,
          38, 8, 9, 17, 16, 29, -4, 4, 2, 1, 46, 6, 49, -16, 21, -19, -10, 15, -13, 20,
          13, -18, 21, -17, 21, 10, 5, 38, -1, 18, 22]

list_w = [9, -26, 3, 21, 48, -14, 43, -4, -16, 16, 41, 43, -27, -9, 10, -10, 4, -2, 1,
          7, 30, -29, 11, 17, 31, 31, -26, 38, 38, -17, 35, 17, 35, 10, -25, 42, -30,
          -10, -20, 20, 15, 0, 29, -30, -21, -13, -27, -21, -18, -26]

print([*map(lambda x, y, w: pow(x, 2) - x * y * w + pow(w, 4), list_x, list_y, list_w)])

# 468. Напишите программу, которая отфильтрует список numbers так, чтобы в нем остались только четные значения. Используйте при этом lambda функцию.
#      Распечатайте получившийся список.

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(list(filter(lambda x: not x % 2, numbers)))