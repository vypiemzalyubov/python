# 210. Допишите программу так, чтобы она печатала на экран список, содержащий последовательность чисел 0,1,2,3,4,5,6,7,8,9 ?

print(list(range(10)))

# 211. Какие параметры необходимо передать в функцию range, чтобы получилась последовательность чисел от 12 до 34 включительно ?

print(list(range(12, 35)))

# 212. Теперь давайте добавим шаг. Необходимо сформировать последовательность 25, 33, 41, 49, 57 .... , 169.

print(list(range(25, 170, 8)))

# 213. Нам осталось поработать с убывающими последовательностями. Сформируйте последовательность -11, -12, -13, -14 .... , -35.

print(list(range(-11, -36, -1)))

# 214. Еще одну. Сформируйте последовательность 10, 9, 8, 7, ... , 0.

print(list(range(10, -1, -1)))

# 215. И последняя последовательность 1000, 950, 900, 850, ... , 500.

print(list(range(1000, 450, -50)))

# 216. Программа принимает на вход натуральное число N. Ваша задача: вывести на экран все числа от 1 до N, каждое число на отдельной строке. 

print(*range(1, int(input()) + 1), sep='\n')

# 217. Напишите программу, которая выведет все элементы арифметической прогрессии от 0 до 500 включительно с шагом 5.
#      Каждый элемент выводится отдельно на своей строке в таком виде:
#      0
#      5
#      10
#      15
#      ...
#      495
#      500

print(*range(0, 505, 5), sep='\n')

# 218. Программа принимает на вход натуральное число N. Ваша задача: вывести на экран все числа от N до 1 в сторону уменьшения, каждое число на отдельной строке. 

print(*range(int(input()), 0, -1), sep='\n')

# 219. «Надо было брать биткоин в 2012!» именно такую фразу ваша программа должна вывести на экран 13 раз.
#      Программа должна вывести 13 раз фразу «Надо было брать биткоин в 2012!», каждый раз на отдельной строке и без кавычек.

[print('Надо было брать биткоин в 2012!') for _ in range(13)]

# 220. Каждый, кто смотрел Симпсонов, помнит, что в начале любой серии Барт писал забавные фразы на доске.
#      Давайте и мы напишем подобную программу. На вход ей будет поступать фраза и затем количество раз, которое эту фразу нужно повторить.

(lambda s: [print(s) for _ in range(int(input()))])(input())

# 221. Напишите программу, которая считывает два натуральных числа a и b (гарантируется, что a<b), после чего для всех чисел от a до b включительно выводит:
#      - “Fizz”, если это число делится на 3;
#      - “Buzz”, если это число делится на 5;
#      - “FizzBuzz”, если выполнены оба предыдущих условия;
#      - само это число в остальных случаях.
#      Формат ввода: Два числа a и b, каждое на отдельной строке.
#      Формат вывода: Для всех чисел от a до b напечатайте по одной строке, соответствующей правилам, описанным в условии.

for i in range(int(input()), int(input()) + 1):
    if not i % 3 and not i % 5: print('FizzBuzz')
    elif not i % 3: print('Fizz')
    elif not i % 5: print('Buzz')
    else: print(i)

# 222. Давайте составим сводную информацию о квадратах и кубах интервала чисел.
#      На вход программе подается два натуральных числа a и b (гарантируется, что a<b), после чего для каждого целого числа на интервале 
#      от a до b включительно необходимо вывести фразу следующего вида: «Число {число}; его квадрат = {квадрат}; его куб = {куб}»
#      Кавычки выводить не нужно и пользуйтесь f-строкой.
#      На вход программе подается два натуральных числа a и b, каждое на отдельной строке.
#      Программа должна вывести текст в соответствии с условием задачи.

(lambda a, b: [print(f'Число {i}; его квадрат = {i ** 2}; его куб = {i ** 3}') for i in range(a, b + 1)])(int(input()), int(input()))

# 223. Если перечислить все натуральные числа ниже 10, которые кратны 3 или 5, то получим 3, 5, 6 и 9. Сумма этих чисел 23.
#      Напишите программу, которая принимает натуральное число n и находит сумму всех чисел ниже переданного числа n, которые делятся на 3 или на 5.

print(sum(i for i in range(int(input())) if not i % 3 or not i % 5))

# 224. Стандартная задача на нахождения факториала. Факториал числа n! обозначается и находится по формуле n!=1∗2∗3∗...∗n
#      Значит, согласно этой формуле 4!=1∗2∗3∗4=24, 5!=1∗2∗3∗4∗5=120
#      Но учитывайте, что 1!=1, 0!=1
#      Входные данные: Поступает на вход одно целое число n (n>=0)
#      Выходные данные: Найдите и выведите на экран  n!

f = 1; [(f := f * i) for i in range(1, int(input()) + 1)]; print(f)