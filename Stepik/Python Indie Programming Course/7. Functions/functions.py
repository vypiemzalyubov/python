# 355. Давайте начнем с легкого примера. Создадим функцию с именем keanu_reeves, которая выводит сообщение "YOU'RE BREATHTAKING".and
#      Ваша задача написать только определение функции keanu_reeves.

def keanu_reeves():
    print("YOU'RE BREATHTAKING")

# 356. Всеми любимая программа «hello world». Создайте функцию с именем say_hello_world , которая принимает на вход имя человека в виде строки и печатает фразу «{name} говорит hello world!»
#      Ваша задача написать только определение функции say_hello_world.

def say_hello_world(name):
    print(f'{name} говорит hello world!')

# 357. Напишите функцию summa_n, которая принимает одно целое положительное t число и находит сумму всех чисел от 1 до t включительно. Программа должна распечатать сообщение:
#      "Я знаю, что сумма чисел от 1 до {t} равна {S}", где в качестве t и S вам необходимо подставить значения (см. тестовые данные).
#      Ваша задача написать только определение функции summa_n, вызывать ее не нужно.

def summa_n(t):
    s = sum(range(1, t + 1))
    print(f'Я знаю, что сумма чисел от 1 до {t} равна {s}')

# 358. Напишите функцию exponentiation, которая принимает на вход целое число и выводит на экран через пробел квадрат и куб этого числа. 
#      Вам необходимо написать только определение функции exponentiation.

def exponentiation(x):
    print(f'{x ** 2} {x ** 3}')

# 359. Напишите функцию sum_num для суммирования всех цифр строки. 
#      Функция должна принимать строку, суммировать все ее символы, которые являются цифрами, и в качестве ответа выводить найденную сумму.
#      Вам необходимо написать только определение функции sum_num.

def sum_num(s):
    print(sum(int(i) for i in s if i.isdigit()))

# 360. Напишите функцию get_body_mass_index, которая принимает массу тела человека в кг и рост в см и рассчитывает индекс массы тела человека по формуле:
#      index = масса / рост ** 2
#      Рост указывается в формуле в метрах, а не в сантиметрах.
#      Функция и должна вывести на экран информацию о массе человека, отталкиваясь от найденного индекса:
#      - если индекс < 18.5 программа должна вывести Недостаточная масса тела
#      - если 18.5 <= индекс <= 25 программа должна вывести Норма
#      - если индекс > 25 программа должна вывести Избыточная масса тела
#      Вам необходимо написать только определение функции get_body_mass_index.

def get_body_mass_index(weight, height):
    index = weight / ((height / 100)) ** 2
    print('Недостаточная масса тела' if index < 18.5 else 'Избыточная масса тела' if index > 25 else 'Норма')

# 361. Напишите функцию check_password, которая проверяет переданный ей пароль на сложность и печатает на экран результат проверки.
#      Сложным паролем будет считаться комбинация символов, в которой:
#      - Есть хотя бы 3 цифры
#      - Есть хотя бы одна заглавная буква 
#      - Есть хотя бы один символ из следующего набора "!@#$%*"
#      - Общая длина не менее 10 символов
#      Если пароль прошел все проверки, функция должна вывести на экран фразу "Perfect password", в противном случае - "Easy peasy".
#      Вам необходимо написать только определение функции check_password.

def check_password(password):
    len_digit = title_char = spec_char = 0
    for i in password:
        if i.isdigit():
            len_digit +=1
        if i.isupper():
            title_char += 1
        if i in '!@#$%*':
            spec_char += 1
    print('Perfect password' if len_digit >= 3 and title_char and spec_char and len(password) >= 10 else 'Easy peasy')
    
# 362. Создайте функцию count_letters, которая принимает на вход фразу и подсчитывает, какое количество в ней строчных(K) и заглавных (N) букв, 
#      все остальные символы игнорируются. Функция должна вывести на экран информацию о найденных буквах в определенном формате:
#      Количество заглавных символов: N
#      Количество строчных символов: K
#      Вам необходимо написать только определение функции count_letters.

def count_letters(s):
    n = k = 0
    for char in s:
        n += char.isupper()
        k += char.islower() 
    print(f'Количество заглавных символов: {n}\nКоличество строчных символов: {k}')

# 363. Напишите функцию repeat_please_n_times, которая принимает один аргумент n - натуральное число. 
#      Функция repeat_please_n_times должна n раз распечатать фразу "Just do it" в отдельной строчке.
#      Ваша задача написать только определение функции repeat_please_n_times, вызывать ее не нужно.

def repeat_please_n_times(n):
    for i in range(n):
        print('Just do it')

# 364. Напишите функцию is_between, которая принимает три аргумента и печатает True, если первое число находится между двумя вторыми включительно, и False в противном случае.
#      Ваша задача дописать только тело функции is_between.

def is_between(name, surname, middlename):
    print(b <= a <= c or c <= a <= b)

a, b, c = map(int, input().split())

is_between(a, b, c)

# 365. Напишите функцию count_letter(text, letter), которая принимает два параметра:
#      - text – текст, в котором нужно посчитать сколько раз появилась буква letter, учитывая регистр буквы;
#      - letter – буква, количество которой мы должны посчитать в text.
#      Функция count_letter должна выводить на экран найденное количество букв  letter в тексте text.
#      Ваша задача дописать только тело функции count_letter.

def count_letter(text, letter):
    print(sum([i.count(symbol) for i in text]))
    
text = input()
symbol = input()

count_letter(text, symbol)

# 366. Напишите функцию print_initials(name, surname, middlename), которая принимает три параметра:
#      - name – имя человека;
#      - surname – фамилия человека;
#      - middlename– отчество человека;
#      а затем выводит на печать фамилию и инициалы в определенном формате (первая буква фамилии должна стать заглавной, все остальные строчные; 
#      в имени и отчестве остаются только по одной букве в верхнем регистре).
#      Ваша задача дописать только тело функции print_initials.

def print_initials(name, surname, middlename):
    print(f'{surname.title()} {name.upper()[0]}.{middlename.upper()[0]}.')

name = input()
surname = input()
middlename = input()

print_initials(name, surname, middlename)

# 367. Ниже в коде представлено несколько проверок. Ваша задача исправить код так, чтобы все проверки прошли.

assert 200 > 100                             
assert [100] * 4 < [100, 100, 100, 10000]    
assert sum([1, 3, 5]) == sum([6, 3])             
assert max(3, -1, 9) != -1                   
print('Проверки пройдены')

# 368. Давайте считать человека подростком, если его возраст находится в пределах от 12 до 17 лет включительно. Напишите функцию is_person_teenager, 
#      которая помогает по возрасту определить является ли человек подростком или нет. Функция is_person_teenager принимает на вход возраст человека и возвращает True или False.
#      Нужно написать только определение функций is_person_teenager.

def is_person_teenager(age):
    return 12 <= age <= 17

# 369. Напишите функцию factorial, которая принимает на вход одно неотрицательное число, и возвращает значение факториала данного числа.
#      Нужно написать только определение функции factorial.

def factorial(n):
    fact = 1
    for i in range(1, n + 1):
        fact *= i
    return fact

n = int(input())
print(factorial(n))

# 370. Напишите функцию generate_fizz_buzz_list, которая принимает одно целое число n - размер списка. Функция generate_fizz_buzz_list должна:
#      - обойти числа от 1 до n включительно и для каждого такого числа выполнить последовательно проверки с пункта 2 по пункт 5
#      - Если число кратно и трем, и пяти, то в список заносим строку FizzBuzz 
#      - Если число кратно трем, то в список заносим строку Fizz
#      - Если число кратно пяти, то в список заносим строку Buzz
#      - Если число не кратно ни трем ни пяти, то в список заносим само это число
#      В итоге функция generate_fizz_buzz_list должна вернуть сформированный список из n элементов. Ваша задача написать только определение функции generate_fizz_buzz_list.

def generate_fizz_buzz_list(n):
    return ["FizzBuzz" if not i % 3 and not i % 5 else "Fizz" if not i % 3 else "Buzz" if not i % 5 else i for i in range(1, n + 1)]

# 371. В этой задаче вам необходимо воспользоваться уже готовой функцией gcd(a, b), которая принимает два числа и находит наибольших общий делитель для них.
#      Ваша задача при помощи функции gcd определить НОД произвольного количества чисел.
#      Входные данные: На первой строке вводится натуральное число n – количество чисел. Далее идут n строк, в каждой из которых натуральное число.
#      Выходные данные: НОД введенных чисел.

from functools import reduce

def gcd(a, b):
    while b > 0:
        a, b = b, a%b
    return a

l = [int(input()) for _  in range(int(input()))]
print(reduce(gcd, l))

# 372. Ваша задача написать функцию find_duplicate, которая принимает один аргумент - список чисел. Функция должна возвращать список из дублей, 
#      каждый дубль нужно брать только один раз в том порядке, в котором они встречаются в исходном списке. Под дублем будем подразумевать число, которое присутствовало в списке несколько раз. 
#      find_duplicate([1, 1, 1, 1, 1, 2, 2, 2, 2]) => [1, 2]
#      find_duplicate([2, 1, 1, 1, 1, 1, 2, 2, 2, 2]) => [2, 1]
#      find_duplicate([1, 2, 3, 4]) => []
#      find_duplicate([1, 2, 3, 4, 3]) => [3]
#      Ваша задача написать только определение функции find_duplicate.

def find_duplicate(lst):
    l = []
    for i in lst:
        if lst.count(i) > 1 and i not in l:
            l.append(i)
    return l

# 373. Напишите функцию first_unique_char, которая принимает строку символов и возвращает целое число: позицию первого уникального символа в строке. 
#      В случае, если уникальных символов в переданной строке нет, верните -1. Регистр символов не учитывайте.
#      Ваша задача написать только определение функции first_unique_char.

def first_unique_char(s):
    for i, n in enumerate(s):
        if s.count(n) == 1:
            return i
    return -1

s = input()
print(first_unique_char(s))

# 374. Ваша задача написать функцию format_name_list, которая принимает список словарей, у каждого словаря в этом списке есть только ключ name.
#      Функция format_name_list должна вернуть строку, в которой все имена из списка разделяются запятой кроме последних двух имен, они должны быть разделены союзом "и". 
#      Если в списке нет ни одного имени, функция должна вернуть пустую строку. Ниже представлены примеры:
#      format_name_list([{'name': 'Bart'}, {'name': 'Lisa'}, {'name': 'Maggie'}]) => 'Bart, Lisa и Maggie'
#      format_name_list([{'name': 'Bart'}, {'name': 'Lisa'}]) => 'Bart и Lisa'
#      format_name_list([{'name': 'Bart'}]) => 'Bart'
#      format_name_list([]) => ''
#      Ваша задача написать только определение функции format_name_list.

def format_name_list(names: list):
    tmp = [i['name'] for i in names]
    if len(tmp) == 0:
        return ''
    elif len(tmp) == 1:
        return tmp[0]
    s = ', '.join(tmp[0:-1])
    return f'{s} и {tmp[-1]}'