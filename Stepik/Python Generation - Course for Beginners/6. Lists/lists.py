# 207. На вход программе подается одно число nn. Напишите программу, которая выводит список [1, 2, 3, ..., n].

n = int(input())
spisok = list(range(1, n + 1))
print(spisok)

# 208. На вход программе подается одно число n. Напишите программу, которая выводит список, состоящий из n букв 
#      английского алфавита ['a', 'b', 'c', ...] в нижнем регистре.
#      На вход программе подается натуральное число n, n ≤ 26.

n = int(input())
a = []
for i in range(97, n + 97):
    s = chr(i)
    a += s
print(a)

# 209. Дополните приведенный код, используя индексатор, так чтобы он вывел 17-ый элемент списка primes.

primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]
print(primes[16])

# 210. Дополните приведенный код, используя индексатор, так чтобы он вывел последний элемент списка primes.

primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]
print(primes[-1])

# 211. Дополните приведенный код, используя срезы, так чтобы он вывел первые 6 элементов списка primes.
#      Примечание. Результатом вывода должна быть строка [2, 3, 5, 7, 11, 13].

primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]
print(primes[:6])

# 212. Дополните приведенный код, так чтобы он вывел сумму минимального и максимального элементов списка numbers.

numbers = [12.5, 3.1415, 2.718, 9.8, 1.414, 1.1618, 1.324]
print(min(numbers) + max(numbers))

# 213. Дополните приведенный код так, чтобы он вывел среднее арифметическое элементов списка evens.

evens = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
average = sum(evens) / len(evens)
print(average)

# 214. Дополните приведенный код так, чтобы элемент списка имеющий значение Green заменился на значение Зеленый, 
#      а элемент Violet на Фиолетовый. Далее необходимо вывести полученный список.

rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']
rainbow[3] = 'Зеленый'
rainbow[-1] = 'Фиолетовый'
print(rainbow)

# 215. Дополните приведенный код так, чтобы он вывел элементы списка languages в обратном порядке.

languages = ['Chinese', 'Spanish', 'English', 'Hindi', 'Arabic', 'Bengali', 'Portuguese', 'Russian', 'Japanese', 'Lahnda']
print(languages[::-1])

# 216. Дополните приведенный код, используя операторы конкатенации (+) и умножения списка на число (*), так чтобы он вывел список:
#      [1, 2, 3, 1, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13].

numbers1 = [1, 2, 3]
numbers2 = [6]
numbers3 = [7, 8, 9, 10, 11, 12, 13]
print(numbers1 * 2 + numbers2 * 9 + numbers3)

# 217. Дополните приведенный код, чтобы он:
#      Вывел длину списка;
#      Вывел последний элемент списка;
#      Вывел список в обратном порядке (вспоминаем срезы);
#      Вывел YES если список содержит числа 5 и 17, и NO в противном случае;
#      Вывел список с удаленным первым и последним элементами.
#      Каждый вывод осуществлять с новой строки.

numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10, 10, 12, 0, 0, 6, 14, 8, 2, 12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]
print(len(numbers))
print(numbers[-1])
print(numbers[::-1])
print('YES' if 5 and 17 in numbers else 'NO')
print(numbers[1:-1])

# 218. На вход программе подается натуральное число n, а затем n строк. Напишите программу, которая создает из указанных строк список и выводит его.
#      На вход программе подаются натуральное число n, а затем n строк, каждая на отдельной строке.
#      Программа должна вывести список состоящий из указанных строк.

n = int(input())
result = []
for i in range(n):
    result.append(input())
print(result)

# 219. Напишите программу, выводящую следующий список:
#      ['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', ...]
#      Программа должна вывести указанный список.
#      Последний элемент списка состоит из 26 символов z.

alphabet = []
for i in range(1, 27):
    alphabet.append(chr(96 + i) * i)
print(alphabet)

# 220. На вход программе подается натуральное число n, а затем n целых чисел. Напишите программу, которая создает из указанных чисел список их кубов.
#      На вход программе подаются натуральное число n, а затем n целых чисел, каждое на отдельной строке.
#      Программа должна вывести список, состоящий из кубов указанных чисел.

n = int(input())
res = []
for i in range(n):
    x = int(input())
    res.append(x ** 3)
print(res)

# 221. На вход программе подается натуральное число n. Напишите программу, которая создает список состоящий из делителей введенного числа.
#      На вход программе подается натуральное число n.
#      Программа должна вывести список, состоящий из делителей введенного числа.

n = int(input())
res = []
for i in range(1, n + 1):
    if n % i == 0:
        res.append(i)
print(res)

# 222. На вход программе подается натуральное число n, n ≥ 2, а затем n целых чисел. 
#      Напишите программу, которая создает из указанных чисел список, состоящий из сумм соседних чисел (0 и 1, 1 и 2, 2 и 3 и т.д.).
#      На вход программе подаются натуральное число n, а затем nn целых чисел, каждое на отдельной строке.
#      Программа должна вывести список, состоящий из сумм соседних чисел.

n = int(input())
s = []
res = []
for i in range(n):
    x = int(input())
    s.append(x)
for j in range(len(s) - 1):
    res.append(s[j] + s[j + 1])
print(res)

# 223. На вход программе подается натуральное число n, а затем n целых чисел. Напишите программу, которая создает из указанных 
#      чисел список, затем удаляет все элементы стоящие по нечетным индексам, а затем выводит полученный список.
#      На вход программе подаются натуральное число n, а затем n целых чисел, каждое на отдельной строке.
#      Программа должна вывести список в соответствии с условием задачи.

n = int(input())
res = []
for i in range(n):
    x = int(input())
    res.append(x)
del res[1::2]    
print(res)

# 224. На вход программе подается натуральное число n и n строк, а затем число k. 
#      Напишите программу, которая выводит k-ую букву из введенных строк на одной строке без пробелов.
#      На вход программе подается натуральное число n, далее n строк, каждая на отдельной строке. 
#      В конце вводится натуральное число k – номер буквы (нумерация начинается с единицы).
#      Программа должна вывести текст в соответствии с условием задачи.
#      Если некоторые строки слишком короткие, и в них нет символа с заданным номером, то такие строки при выводе нужно игнорировать.

n = int(input())
spisok = []
res = ''
for _ in range(n):
    s = input()
    spisok.append(s)
k = int(input())    
for s in spisok:
    if len(s) >= k:
        res += s[k - 1]
print(res)

# 225. На вход программе подается натуральное число n, а затем n строк. Напишите программу, которая создает список из символов всех строк, а затем выводит его.
#      На вход программе подаются натуральное число n, а затем n строк, каждая на отдельной строке.
#      Программа должна вывести список состоящий из символов всех введенных строк.
#      В результирующем списке могут содержаться одинаковые символы.

n = int(input())
res = []
for _ in range(n):
    s = input()
    res.extend(s)
print(res)

# 226. Дополните приведенный код, так чтобы он вывел сумму квадратов элементов списка numbers.

numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
total = 0
for i in numbers:
    total += i ** 2
print(total)

# 227. На вход программе подается натуральное число n, а затем nn целых чисел. Напишите программу, которая для каждого введенного 
#      числа x выводит значение функции f(x) = x^2 + 2x + 1 каждое на отдельной строке.
#      На вход программе подаются натуральное число nn, а затем nn целых чисел, каждое на отдельной строке.
#      Программа должна вывести сначала введенные числа, затем пустую строку, а затем соответствующие значения функции.

n = int(input())
res1 = []
res2 = []
for _ in range(n):
    x = int(input())
    res1.append(x)
    f = x ** 2 + 2 * x + 1
    res2.append(f)
print(*res1, sep='\n')
print()
print(*res2, sep='\n')

# 228. При анализе данных, собранных в рамках научного эксперимента, бывает полезно удалить самое большое и самое маленькое значение.
#      На вход программе подается натуральное число n, а затем n различных натуральных чисел. Напишите программу, 
#      которая удаляет наименьшее и наибольшее значение из указанных чисел, а затем выводит оставшиеся числа каждое на отдельной строке, не меняя их порядок.

n = int(input())
res = []
for i in range(n):
    n = int(input())
    res.append(n)
res.remove(max(res))
res.remove(min(res))
print(*res, sep='\n')

# 229. На вход программе подается натуральное число n, а затем n строк. Напишите программу, которая выводит только уникальные строки, 
#      в том же порядке, в котором они были введены.
#      На вход программе подаются натуральное число n, а затем n строк, каждая на отдельной строке.
#      Программа должна вывести текст в соответствии с условием задачи.
#      Считайте, что все строки состоят из строчных символов.

n = int(input())
res = []
for i in range(n):
    s = input()
    if s not in res:
        res.append(s)
print(*res, sep='\n')

# 230. На вход программе подается натуральное число n, затем n строк, затем еще одна строка — поисковый запрос. 
#      Напишите программу, которая выводит все введенные строки, в которых встречается поисковый запрос.
#      На вход программе подаются натуральное число nn — количество строк, затем сами строки в указанном количестве, затем один поисковый запрос.
#      Программа должна вывести все введенные строки, в которых встречается поисковый запрос.
#      Поиск не должен быть чувствителен к регистру символов.

n = int(input())
res1 = []
for _ in range(n):
    s = input()
    res1.append(s)
search = input()
for i in res1:
    if search.lower() in i.lower():
        print(i)

# 231. На вход программе подается натуральное число n, затем n строк, затем число k — количество поисковых запросов, затем k строк — поисковые запросы. 
#      Напишите программу, которая выводит все введенные строки, в которых встречаются все поисковые запросы.
#      На вход программе подаются натуральное число n — количество строк, затем сами строки в указанном количестве, затем число k, затем сами поисковые запросы.
#      Программа должна вывести все введенные строки, в которых встречаются все поисковые запросы.
#      Поиск не должен быть чувствителен к регистру символов.

n = int(input())
res1 = []
for _ in range(n):
    s1 = input()
    res1.append(s1)
k = int(input())
res2 = []
for _ in range(k):
    s2 = input()
    res2.append(s2)
res3 = []
for i in res1:
    count = 0
    for j in res2:
        if j.lower() in i.lower():
            count += 1
    if count == len(res2):
        res3.append(i)
print(*res3, sep='\n')

# 232. На вход программе подается натуральное число n, а затем n целых чисел. Напишите программу, которая сначала выводит все отрицательные числа, 
#      затем нули, а затем все положительные числа, каждое на отдельной строке. Числа должны быть выведены в том же порядке, в котором они были введены.

n = int(input())
res1 = []
for _ in range(n):
    s = input()
    res1.append(s)
res_neg = []
res_zero = []
res_pos = []
for i in res1:
    if int(i) < 0:
        res_neg.append(i)
    elif int(i) == 0:
        res_zero.append(i)
    elif int(i) > 0:
        res_pos.append(i)
print(*res_neg, sep='\n')
print(*res_zero, sep='\n')
print(*res_pos, sep='\n')

# 233. На вход программе подается строка текста. Напишите программу, которая выводит слова введенной строки в столбик.

s = input()
print(*s.split(), sep='\n')

# 234. На вход программе подается строка текста, содержащая имя, отчество и фамилию человека. Напишите программу, которая выводит инициалы человека.

s = input().split()
for i in s:
    print(i[0], end='.')

# 235. В операционной системе Windows полное имя файла состоит из буквы диска, после которого ставится двоеточие и символ  "\",  
#      затем через такой же символ перечисляются подкаталоги (папки), в которых находится файл, в конце пишется имя файла (C:\Windows\System32\calc.exe).
#      На вход программе подается одна строка с корректным именем файла в операционной системе Windows. 
#      Напишите программу, которая разбирает строку на части, разделенные символом "\". Каждую часть вывести в отдельной строке.

s = input().split()
print(*' '.join(s).split('\\'), sep='\n')

# 236. На вход программе подается строка текста, содержащая целые числа. Напишите программу, которая по заданным числам строит столбчатую диаграмму.
#      На вход программе подается строка текста, содержащая целые числа, разделенных символом пробела.
#      Программа должна вывести столбчатую диаграмму.

s = input().split()
for i in s:
    print(int(i) * '+')

# 237. На вход программе подается строка текста, содержащая 4 целых числа разделенных точкой. Напишите программу, 
#      которая определяет является ли введенная строка текста корректным ip-адресом.
#      На вход программе подается строка текста, содержащая 4 целых числа разделенных точкой.
#      Программа должна вывести «ДА», если введеная строка является корректным ip-адресом, и «НЕТ» — в противном случае.
#      ip-адрес является корректным, если все 4 числа находятся в диапазоне от 0 до 255 включительно.

s = input().split('.')
count = 0
for i in range(len(s)):
    if 0 <= int(s[i]) <= 250:
        count += 1
    else:
        break
if count == 4:
    print('ДА')
else:
    print('НЕТ')

# 238. На вход программе подается строка текста и строка разделитель. Напишите программу, 
#      которая вставляет указанный разделитель между каждым символом введенной строки текста.

s = input()
print(input().join(s))

# 239. На вход программе подается строка текста, содержащая натуральные числа. Из данной строки формируется список чисел. 
#      Напишите программу, которая подсчитывает, сколько в полученном списке пар элементов, равных друг другу. 
#      Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать.
#      На вход программе подается строка текста, содержащая натуральные числа, отделенные символом пробела.
#      Программа должна вывести одно число – количество пар элементов, равных друг другу.

s = input().split()
count = 0
for i in range(len(s)):
    for j in range(i + 1, len(s)):
        if s[i] == s[j]:
            count += 1
print(count)

# 240. Дополните приведенный код, чтобы он:
#      Заменил второй элемент списка на 17;
#      Добавил числа 4, 5 и 6 в конец списка;
#      Удалил первый элемент списка;
#      Удвоил список;
#      Вставил число 25 по индексу 3;
#      Вывел список, с помощью функции print()

numbers = [8, 9, 10, 11]
numbers[1] = 17
numbers.extend([4, 5, 6])
del numbers[0]
numbers *= 2
numbers.insert(3, 25)
print(numbers)

# 241. На вход программе подается строка текста, содержащая различные натуральные числа. Из данной строки формируется список чисел. 
#      Напишите программу, которая меняет местами минимальный и максимальный элемент этого списка.
#      На вход программе подается строка текста, содержащая различные натуральные числа, разделенные символом пробела.

s = input().split()
big = s.index(max(s, key = int))
small = s.index(min(s, key = int))
s[big], s[small] = s[small], s[big]
print(*s)

# 242. На вход программе подается строка, содержащая английский текст. Напишите программу, которая подсчитывает общее количество артиклей: 'a', 'an', 'the'.
#      На вход программе подается строка, содержащая английский текст. Слова текста разделены символом пробела.
#      Программа должна вывести общее количество артиклей 'a', 'an', 'the' вместе с поясняющим текстом.
#      Артикли могут начинаться с заглавной буквы 'A', 'An', 'The'.

s = input().lower().split()
count = 0
for i in s:
    if i == 'a' or i == 'an' or i == 'the':
        count += 1
print('Общее количество артиклей:', count)

# 243. Немалоизвестный в пустошах Мохаве Курьер забрел в Хидден-Вэли – секретный бункер Братства Стали, и любезно соглашается помочь им в решении их проблем. 
#      Одной из такой проблем являлся странный компьютерный вирус, который проявлялся в виде появления комментариев к программам на терминалах Братства Стали. 
#      Известно, что программисты Братства никогда не оставляют комментарии к коду, и пишут программы на Python, поэтому удаление всех этих комментариев никак не навредит им. 
#      Помогите писцу Ибсену удалить все комментарии из программы.
#      На первой строке вводится символ решётки и сразу же натуральное число nn — количество строк в программе, не считая первой. Далее следует nn строк кода.
#      Нужно вывести те же строки, но удалить комментарии и символы пустого пространства в конце строк. Пустую строку вместо первой строки ввода выводить не надо.

n = input()
n = int(n[1:])
for _ in range(n):
    s = input()
    if '#' in s:
        s = s[:s.find('#')]
    print(s.rstrip())

# 244. На вход программе подается строка текста, содержащая целые числа. Из данной строки формируется список чисел. 
#      Напишите программу, которая сортирует и выводит данный список сначала по возрастанию, а затем по убыванию. 

s = [int(x) for x in input().split()]
s.sort()
print(*s)
s.sort(reverse = True)
print(*s)

# 245. Дополните приведенный код, используя списочное выражение так, чтобы получить новый список, содержащий строки исходного списка с удаленным первым символом.

keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
new_keywords = [i[1:] for i in keywords]
print(new_keywords)

# 246. Дополните приведенный код, используя списочное выражение, так чтобы получить новый список, содержащий длины строк исходного списка.

keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
lengths = [len(i) for i in keywords]
print(lengths)

# 247. Дополните приведенный код списочным выражением, чтобы получить новый список, содержащий только слова длиной не менее пяти символов (включительно)

keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
new_keywords = [i for i in keywords if len(i) >= 5]
print(new_keywords)

# 248. Дополните приведенный код, используя списочное выражение, так чтобы получить список всех чисел палиндромов от 100100 до 10001000.

palindromes = [i for i in range(100, 1001) if i % 10 == i // 100]
print(palindromes)

# 249. На вход программе подается натуральное число nn. Напишите программу, использующую списочное выражение, 
#      которая создает список содержащий квадраты чисел от 1 до n, а затем выводит его элементы построчно, то есть каждый на отдельной строке.

numbers = [i ** 2 for i in range(1, int(input()) + 1)]
print(*numbers, sep='\n')

# 250. На вход программе подается строка текста, содержащая целые числа. Напишите программу, 
#      использующую списочное выражение, которая выведет кубы указанных чисел также на одной строке.
#      На вход программе подается строка текста, содержащая целые числа, разделенные символом пробела.

res = [int(i) ** 3 for i in input().split()]
print(*res)

# 251. На вход программе подается строка текста, содержащая слова. Напишите программу, которая выводит слова введенной строки в столбик.

print(*[i for i in input().split()], sep='\n')

# 252. На вход программе подается строка текста. Напишите программу, использующую списочное выражение, которая выводит все цифровые символы данной строки.

print(*[i for i in input() if '0' <= i <= '9'], sep='')

# 253. На вход программе подается строка текста, содержащая целые числа. Напишите программу, использующую списочное выражение, 
#      которая выведет квадраты четных чисел, которые не оканчиваются на цифру 44.
#      На вход программе подается строка текста, содержащая целые числа, разделенные символом пробела.

print(*[int(i) ** 2 for i in input().split() if int(i) ** 2 % 2 == 0 and int(i) ** 2 % 10 != 4])

# 254. Оптимизируйте приведенный код, реализующий алгоритм пузырьковой сортировки.

a = [17, 24, 91, 96, 67, -27, 79, -71, -71, 58, 48, 88, 88, -16, -78, 96, -76, 56, 92, 1, 32, -17, 36, 88, -61, -97, -37, -84, 50, 47, 94, -6, 52, -76, 93, 14, -32, 98, -65, -16, -9, -68, -20, -40, -71, 93, -91, 44, 25, 79, 97, 0, -94, 7, -47, -96, -55, -58, -78, -78, -79, 75, 44, -56, -41, 38, 16, 70, 17, -17, -24, -83, -74, -73, 11, -26, 63, -75, -19, -13, -51, -74, 21, -8, 21, -68, -66, -84, -95, 78, 69, -29, 39, 38, -55, 7, -11, -26, -62, -84]

n = len(a)
flag = False
for i in range(n - 1):
    for j in range(n - i - 1):
        if a[j] > a[j + 1]:
            a[j], a[j + 1] = a[j + 1], a[j]
            flag = True
        else:
            flag = False
    if flag == False:
        break
print(a)

# 255. Отсортируйте список по возрастанию, реализовав алгоритм сортировки выбором.

a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41, -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80, 27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9, -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]

n = len(a)
for i in range(n):    
    s = max(a[:n - i])
    numindex = a.index(s)
    num = a.pop(numindex)
    a.insert(n - 1 - i, num)
print(a)

# 256. На вход программе подается четное число n, n≥2. Напишите программу, которая выводит список четных чисел

n = int(input())
res = []
for i in range(1, n + 1):
    if i % 2 == 0:
        res.append(i)
print(res)

# 257. На вход программе подаются две строки текста, содержащие целые числа. Из данных строк формируются списки чисел L и M. 
#      Напишите программу, которая создает третий список, элементами которого являются суммы соответствующих элементов списков L и M. 
#      Далее программа должна вывести каждый элемент полученного списка на одной строке через 1 пробел. 
#      На вход программе подаются две строки текста, содержащие целые числа, разделенные символом пробела.
#      Программа должна вывести текст в соответствии с условием задачи.
#      Количество чисел в обеих строках одинаковое.

s1 = input().split()
s2 = input().split()
res = []
for i in range(len(s1)):
    res.append(int(s1[i]) + int(s2[i]))
print(*res)

# 258. На вход программе подается строка текста, содержащая натуральные числа. Напишите программу, которая вставляет между каждым числом знак +, 
#      а затем вычисляет сумму полученных чисел.
#      На вход программе подается строка текста, содержащая натуральные числа, разделенные символом пробела.

s = [int(i) for i in input().split()]
total = sum(s)
print(*s, sep='+', end='=')
print(total)

# 259. На вход программе подается строка текста. Напишите программу, которая определяет является ли введенная строка корректным телефонным номером. 
#      Строка текста является корректным телефонным номером если она имеет формат:
#
#      abc-def-hijk или
#      7-abc-def-hijk
#      где a, b, c, d, e, f, h, i, j, k – цифры от 0 до 9.
#
#      На вход программе подается строка текста.
#      Программа должна вывести «YES» если строка является корректным телефонным номером и «NO» в противном случае.
#      Телефонный номер должен содержать только цифры и символ -, а количество цифр в каждой группе должны быть правильным.

s1 = [i for i in input().split('-')]
s2 = [len(j) for j in s1]
if ''.join(s1).isdigit() and s2 == [3, 3, 4]:
    print('YES')
elif ''.join(s1).isdigit() and s2 == [1, 3, 3, 4] and s1[0] == '7':
    print('YES')
else:
    print('NO')

# 260. На вход программе подается строка текста. Напишите программу, использующую списочное выражение, которая находит длину самого длинного слова.

print(max([len(i) for i in input().split()]))

# 261. На вход программе подается строка текста. Напишите программу, использующую списочное выражение, которая преобразует каждое слово введенного текста 
#      в "молодежный жаргон" по следующему правилу:
#
#      первая буква каждого слова удаляется и ставится в конец слова; 
#      затем в конец слова добавляется слог "ки".
#
#      На вход программе подается строка текста на русском языке.
#      Программа должна вывести текст в соответствии с условием задачи.

print(*[i[1:] + i[0] + 'ки' for i in input().split()])