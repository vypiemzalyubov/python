# 119. Исправьте код так, чтобы он заменил все буквы O на X. Новая буква должна быть такого же регистра, как и оригинальная.
#      Нужно исправить код, чтобы он смог заменить O на X, o на x.
#      На вход программе подаётся 1 строка.
#      Выходные данные:
#      - Строка, с совершёнными заменами.

import re

def get_x(m):
    return {'o': 'x', 'O':'X'}[m[0]]

print(re.sub(r'(?i)o', get_x, input()))

# 120. Найдите все слова привет. Регистр учитывать не нужно.
#      Нужно найти слова привет в разном регистре.
#      На вход программе подаётся 1 строка.
#      Выходные данные:
#      - Все слова привет в тексте.

import re

pattern = r'(?i)привет'
print(re.findall(pattern, input()))

# 121. Дан большой текст, который состоит из нескольких строк, он находится в переменной text.
#      Найдите все строки в этой переменной, которые состоят только из символов ^ и $.
#      Из всех строк в переменной text найти только те, которые полностью состоят из символов ^$
#      На вход программе подаётся 1 строка.
#      Выходные данные:
#      - Список строк, которые получилось найти.

import re, sys

text = ''.join(sys.stdin.readlines())
print(list(x[0] for x in re.finditer(r'(?m)^[$^]+$', text)))

# 122. Дан большой текст, который состоит из нескольких строк, он находится в переменной text.
#      Найдите в нём текст от start до end.
#      Нужно найти весь текст от start до end, текст может быть растянут на несколько строк.
#      На вход программе подаётся 1 строка.
#      Выходные данные:     
#      - Найденный текст.

import re, sys

text = ''.join(sys.stdin.readlines())
print(re.findall(r'(?s)start(.+)end', text))

# 123. В этом задании нужно использовать флаг, но не используйте встроенные флаги и никак не изменяйте регулярное выражение - иначе оно не пройдёт проверку.
#      Скомпилируйте следующее регулярное выражение, и запишите его в переменную pattern:
#       (?:
#           (?:\s*[+>~,]\s*|\s+)
#           |
#           [^:+>~,\s\\[\]]+(?:\\.[^:+>~,\s\\[\]]*)*
#       )
#       |
#       \[(?:
#           [^\\[\]]*(?:\\.[^\\[\]]*)*
#           |
#           [^=]+=~?\s*
#           (?:
#               "[^\\"]*(?:\\.[^"\\]*)*"
#               |
#               '[^\\']*(?:\\.[^'\\]*)*'
#           )
#       )\]
#       |
#       :[^\\:([]+(?:\\.[^\\:([]*)*
#       (?:
#           \((?:
#               [^\\()]*(?:\\.[^\\()]*)*
#               |
#               "[^\\"]*(?:\\.[^"\\]*)*"
#               |
#               '[^\\']*(?:\\.[^'\\]*)*'
#           )\)
#       )?
#      Нужно скомпилировать регулярное выражение выше и записать его в переменную pattern. Для того, чтобы выражение успешно скомпилировалось, нужно использовать флаг.

import re


pattern = re.compile(r"""
(?:
    (?:\s*[+>~,]\s*|\s+)
    |
    [^:+>~,\s\\[\]]+(?:\\.[^:+>~,\s\\[\]]*)*
)
|
\[(?:
    [^\\[\]]*(?:\\.[^\\[\]]*)*
    |
    [^=]+=~?\s*
    (?:
        "[^\\"]*(?:\\.[^"\\]*)*"
        |
        '[^\\']*(?:\\.[^'\\]*)*'
    )
)\]
|
:[^\\:([]+(?:\\.[^\\:([]*)*
(?:
    \((?:
        [^\\()]*(?:\\.[^\\()]*)*
        |
        "[^\\"]*(?:\\.[^"\\]*)*"
        |
        '[^\\']*(?:\\.[^'\\]*)*'
    )\)
)?
""", flags=re.VERBOSE)

# 123. Скомпилируйте выражение [123]. Выведите отладочную информацию в консоль.
#      Нужно скомпилировать регулярное выражение и вывести отладочную информацию в консоль.

import re

pattern = re.compile(r'[123]', flags=re.DEBUG)