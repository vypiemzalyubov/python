# 69. В переменной match записан объект Match. Выведите на экран:
#     Его нулевую группу
#     Начало вхождения нулевой группы
#     Конец вхождения нулевой группы
#     Атрибут pos
#     Атрибут endpos
#     Атрибут re
#     Атрибут string

import re

match = re.match(input(), input())
print(match.group(0))
print(match.start(0))
print(match.end(0))
print(match.pos)
print(match.endpos)
print(match.re)
print(match.string)

# 70. Многие функции возвращают None в результате своей работы, если ничего не было найдено.
#     Попробуйте вывести нулевую группу в Match-объекте, если совпадение было найдено. Если его нет - ничего не выводите.

import re

match = re.match(input(), input())
if match:
    print(match[0])

# 71. Напишите программу, которая найдёт первый хештег в тексте и выведет его в консоль.
#     Нужно найти первый хештег в тексте:
#     Начинается с символа #
#     После # стоит последовательность из латинских букв нижнего регистра

import re

pattern = r'#[a-z]+'
string = input()
match = re.search(pattern, string)
print(match[0] if match else '')

# 72. У Илона Маска на компьютере хранится очень много важных данных. Для запуска ракеты на Марс нужен секретный код, который был утерян. 
#     Илон написал программу, которая открывает все файлы на компьютере по очереди и проходит по каждой его строке (4 строки за один проход). 
#     Допишите его программу так, чтобы она находила слово "Код" или "код". 
#     У Илона больше нет никаких секретных кодов на компьютере, поэтому он решил использовать re.search(), т.к. re.search() находит только первое вхождение в строке.
#     Илон не помнит из каких символов он составлен, а также его длину, но он точно помнит, что перед самим кодом было написано слово код или Код. 
#     Если помочь Илону и сказать на какой строке и в каком её месте есть слово код, то он сразу сможет его найти.
#     Если в этих строках кода нет - нужно вывести строку: код не найден.
#     Найти строку, в которой есть последовательности код или Код. Получить номер этой строки и номер начала вхождения последовательности.

import re

line_number = 1
found = False

for i in range(4):
    line = input()
    match = re.search(r"код|Код", line)
    if match:
        print(f"{line_number} {match.start()}")
        found = True
        break
    line_number += 1

if not found:
    print("код не найден")

# 73. Вы получили доступ к секретному чату, в котором часто дарят ключи от Windows 7, и решили украсть один из них, т.к. у вас не активирован Windows 7. 
#     Вы выкачали все сообщения от новых к старым и проходите по ним программой. 
#     Нужно найти первый попавшийся ключ. Нужные ключи в чате всегда отправляют в виде:
#     Activation key: XXXXX-XXXXX-XXXXX-XXXXX-XXXXX
#     X - любая цифра или латинская буква в верхнем регистре
#     Перед нужным ключом должна стоять строка Activation key:
#     На вход программе подаётся 5 строк. Гарантируется, что в этих строках есть как минимум 1 ключ.
#     Выведите в консоль ключ, который был найден. Только ключ. Другие данные не нужны.

import re

for i in range(5):
    line = input()
    match = re.search(r"(?<=Activation key: )[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}", line)
    if match:
        print(match.group())

# 74. Даны данные в формате JSON. С помощью регулярных выражений нужно получить ключ t и его значение.
#     Нужно найти ключ t и его значание:
#     Значением является последовательностью из арабских цифр, символов . и +
#     Перед значением стоит t=
#     На вход программе подаётся 1 строка с данными в формате JSON.
#     Выведите в консоль ключ t и его значение.

import re

line = input()
pattern = r"(?<=(t=))[\d.+]+"
match = re.search(pattern, line)
print(match[1] + match[0])

# 75. Напишите программу, которая будет искать первое слово в начале текста.
#     Нужно найти первое слово в начале строки:
#     Состоит как минимум из одной буквы
#     Используются буквы латинского  алфавита обоих регистров
#     На вход программе подаётся 1 строка.
#     Если строка начинается с слова, то нужно вывести: Первое слово в предложении: word, где word - найденное слово.

import re

line = input()
pattern =  "[A-z]{1,}"
match = re.match(pattern, line)
if match:
    print(f"Первое слово в предложении: {match.group()}")

# 76. Напишите программу, которая будет проверять, может ли текст содержать в себе seed фразу или нет.
#     Нужно проверить, может ли текст содержать seed-фразу:
#     Seed-фраза - это последовательность из 12, 18 или 24 случайных слов
#     В данном случае нужно проверять, что текст начинается как минимум с 12 слов
#     Слова состоят из букв латинского алфавита нижнего регистра
#     Между словами могут стоять только пробелы
#     На вход программе подаётся 1 строка.
#     Если строка походит по условиям, то нужно вывести: возможно, это seed-фраза. 

import re

line = input()
pattern = r'([a-z]+ ){11,}[a-z]+'
match = re.match(pattern, line)
if match:
    print('возможно, это seed-фраза')

# 77. Напишите программу, которая будет доставать все символы до @ в почтовых адресах.
#     Нужно получить все символы до @ из адреса электронной почты.
#     На вход программе подаётся строка с адресом электронной почты.
#     Вывести всё содержимое, до символа @. 

import re

line = input()
pattern = r'[a-z\d]+(?=@)'
match = re.match(pattern, line)
if match:
    print(f'{match.group()}')

# 78. Дарья ждёт милого мальчика, который напишет ей ночью: номер, срок действия, владельца, CVV. Помогите ей проверить номер банковской карты.
#     Найдите все последовательности цифр, которые начинаются от 13 цифр включительно.
#     На вход программе подаётся 1 строка.
#     Если это номер карты - выводите True, иначе - False. 

import re

line = input()
pattern = r'[\d]{13,}'
match = re.fullmatch(pattern, line)
print(True if match else False)

# 79. Проверьте пароль на валидность.
#     Проверить пароль на валидность. Валидным будем считать пароль, который:
#     Состоит из a-z, A-Z, 0-9, @#$%^&*()_-+!?
#     Его длина минимум 8 символов
#     На вход программе подаётся 1 строка.
#     Если это валидный пароль - выводите True, иначе - False.

import re

print(True if re.fullmatch(r'[A-z\d@#$%^&*()_\-+!?]+', input()) else False)

# 80. Очень часто номера телефонов вводят по-разному. Иногда ставят скобки, иногда тире, иногда пробелы, иногда вообще ничего не ставят. 
#     Напишите регулярное выражение, которое найдёт все такие номера.
#     Найдите все последовательности, которые могут быть номерами телефонов:
#     Номер может начинаться с +
#     Потом идут цифры
#     В каждом номере минимум 11 цифр
#     Между цифрами могут быть разделители: ( )-
#     Длина разделителя от 0 до 2 символов включительно
#     На вход программе подаётся 1 строка.
#     Если это номер телефона - выводите True, иначе - False.

import re

pattern = r'\+?\d+[ ]?(\()?\d{3}(?(1)\)|)[ ]?\d{3}(?: |-)?\d{2}(?: |-)?\d{2}'
print(True if re.fullmatch(pattern, input()) else False)

# 81. Проверьте, является ли строка многочленом или нет.
#     Найдите все последовательности, которые могут быть многочленами. Многочлен состоит из слагаемых. Каждое слагаемое это следующее произведение:
#     Первым множителем может быть целое число (любая последовательность цифр)
#     Числа могут быть отрицательными
#     Вторым множителем может быть x
#     x может быть возведён в любую степень (любая последовательность цифр)
#     Между множителями ничего не стоит
#     в произведении может не быть одного из множителей
#     x не всегда возведен в какую-либо степень
#     Между слагаемыми стоит - или +.
#     На вход программе подаётся 1 строка.
#     Если это номер многочлен - выводите True, иначе - False.

import re

pattern = r'([+-]?\d*(x|x\^\d*)?\b)*'
match = re.fullmatch(pattern, input())
print(bool(match))

# 82. Найдите все последовательности, используя \w.
#     Нужно найти последовательности, подходящие по следующим условиям:
#     Состоит из \w
#     Длина - максимально возможная
#     На вход программе подаётся 1 строка.
#     Все найденные последовательности, каждая на новой строке.

import re

line = input()
pattern = r'\w+'
match = re.finditer(pattern, line)
for i in match:
    print(i.group())